package org.lorislab.clingo4j.api.c;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.SizeT;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>clingo</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("clingo") 
@Runtime(CRuntime.class) 
public class ClingoLibrary {
	/**
	 * ! object has a free function, this function can and should still be called.<br>
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:96</i>
	 */
	public @Name("clingo_error") 
	enum clingo_error implements IntValuedEnum<clingo_error > {
		/** !< successful API calls */
		clingo_error_success(0),
		/** !< errors only detectable at runtime like invalid input */
		clingo_error_runtime(1),
		/** !< wrong usage of the clingo API */
		clingo_error_logic(2),
		/** !< memory could not be allocated */
		clingo_error_bad_alloc(3),
		/** !< errors unrelated to clingo */
		clingo_error_unknown(4);
		clingo_error(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_error > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_error > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * ! Enumeration of warning codes.<br>
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:121</i>
	 */
	public @Name("clingo_warning") 
	enum clingo_warning implements IntValuedEnum<clingo_warning > {
		/** !< undefined arithmetic operation or weight of aggregate */
		clingo_warning_operation_undefined(0),
		/** !< to report multiple errors; a corresponding runtime error is raised later */
		clingo_warning_runtime_error(1),
		/** !< undefined atom in program */
		clingo_warning_atom_undefined(2),
		/** !< same file included multiple times */
		clingo_warning_file_included(3),
		/** !< CSP variable with unbounded domain */
		clingo_warning_variable_unbounded(4),
		/** !< global variable in tuple of aggregate element */
		clingo_warning_global_variable(5),
		/** !< other kinds of warnings */
		clingo_warning_other(6);
		clingo_warning(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_warning > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_warning > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * ! Represents three-valued truth values.<br>
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:153</i>
	 */
	public @Name("clingo_truth_value") 
	enum clingo_truth_value implements IntValuedEnum<clingo_truth_value > {
		/** !< no truth value */
		clingo_truth_value_free(0),
		/** !< true */
		clingo_truth_value_true(1),
		/** !< false */
		clingo_truth_value_false(2);
		clingo_truth_value(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_truth_value > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_truth_value > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * ! Enumeration of available symbol types.<br>
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:267</i>
	 */
	public @Name("clingo_symbol_type") 
	enum clingo_symbol_type implements IntValuedEnum<clingo_symbol_type > {
		/** !< the <tt>\#inf</tt> symbol */
		clingo_symbol_type_infimum(0),
		/** !< a numeric symbol, e.g., `1` */
		clingo_symbol_type_number(1),
		/** !< a string symbol, e.g., `"a"` */
		clingo_symbol_type_string(4),
		/** !< a numeric symbol, e.g., `c`, `(1, "a")`, or `f(1,"a")` */
		clingo_symbol_type_function(5),
		/** !< the <tt>\#sup</tt> symbol */
		clingo_symbol_type_supremum(7);
		clingo_symbol_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_symbol_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_symbol_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * ! Enumeration of theory term types.<br>
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:657</i>
	 */
	public @Name("clingo_theory_term_type") 
	enum clingo_theory_term_type implements IntValuedEnum<clingo_theory_term_type > {
		/** !< a tuple term, e.g., `(1,2,3)` */
		clingo_theory_term_type_tuple(0),
		/** !< a list term, e.g., `[1,2,3]` */
		clingo_theory_term_type_list(1),
		/** !< a set term, e.g., `{1,2,3}` */
		clingo_theory_term_type_set(2),
		/** !< a function term, e.g., `f(1,2,3)` */
		clingo_theory_term_type_function(3),
		/** !< a number term, e.g., `42` */
		clingo_theory_term_type_number(4),
		/** !< a symbol term, e.g., `c` */
		clingo_theory_term_type_symbol(5);
		clingo_theory_term_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_theory_term_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_theory_term_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * ! Enumeration for the different model types.<br>
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:886</i>
	 */
	public @Name("clingo_model_type") 
	enum clingo_model_type implements IntValuedEnum<clingo_model_type > {
		/** !< The model represents a stable model. */
		clingo_model_type_stable_model(0),
		/** !< The model represents a set of brave consequences. */
		clingo_model_type_brave_consequences(1),
		/** !< The model represents a set of cautious consequences. */
		clingo_model_type_cautious_consequences(2);
		clingo_model_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_model_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_model_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * ! Enumeration of bit flags to select symbols in models.<br>
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:895</i>
	 */
	public @Name("clingo_show_type") 
	enum clingo_show_type implements IntValuedEnum<clingo_show_type > {
		/** !< Select CSP assignments. */
		clingo_show_type_csp(1),
		/** !< Select shown atoms and terms. */
		clingo_show_type_shown(2),
		/** !< Select all atoms. */
		clingo_show_type_atoms(4),
		/** !< Select all terms. */
		clingo_show_type_terms(8),
		/** !< Select symbols added by extensions. */
		clingo_show_type_extra(16),
		/** !< Select everything. */
		clingo_show_type_all(31),
		/** !< Select false instead of true atoms (::clingo_show_type_atoms) or terms (::clingo_show_type_terms). */
		clingo_show_type_complement(32);
		clingo_show_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_show_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_show_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * NOTE: documented in Control Module<br>
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1030</i>
	 */
	public @Name("clingo_solve_result") 
	enum clingo_solve_result implements IntValuedEnum<clingo_solve_result > {
		clingo_solve_result_satisfiable(1),
		clingo_solve_result_unsatisfiable(2),
		clingo_solve_result_exhausted(4),
		clingo_solve_result_interrupted(8);
		clingo_solve_result(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_solve_result > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_solve_result > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * ! Enumeration of solve modes.<br>
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1074</i>
	 */
	public @Name("clingo_solve_mode") 
	enum clingo_solve_mode implements IntValuedEnum<clingo_solve_mode > {
		/** !< Enable non-blocking search. */
		clingo_solve_mode_async(1),
		/** !< Yield models in calls to clingo_solve_handle_model. */
		clingo_solve_mode_yield(2);
		clingo_solve_mode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_solve_mode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_solve_mode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * ! Enumeration of solve events.<br>
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1082</i>
	 */
	public @Name("clingo_solve_event_type") 
	enum clingo_solve_event_type implements IntValuedEnum<clingo_solve_event_type > {
		/** !< Issued if a model is found. */
		clingo_solve_event_type_model(0),
		/** !< Issued if the search has completed. */
		clingo_solve_event_type_finish(1);
		clingo_solve_event_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_solve_event_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_solve_event_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * ! Supported check modes for propagators.<br>
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1192</i>
	 */
	public @Name("clingo_propagator_check_mode") 
	enum clingo_propagator_check_mode implements IntValuedEnum<clingo_propagator_check_mode > {
		/** !< do not call @ref ::clingo_propagator::check() at all */
		clingo_propagator_check_mode_none(0),
		/** !< call @ref ::clingo_propagator::check() on total assignment */
		clingo_propagator_check_mode_total(1),
		/** !< call @ref ::clingo_propagator::check() on propagation fixpoints */
		clingo_propagator_check_mode_fixpoint(2);
		clingo_propagator_check_mode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_propagator_check_mode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_propagator_check_mode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * ! The values of this enumeration determine if a clause is subject to one of the above deletion strategies.<br>
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1356</i>
	 */
	public @Name("clingo_clause_type") 
	enum clingo_clause_type implements IntValuedEnum<clingo_clause_type > {
		/** !< clause is subject to the solvers deletion policy */
		clingo_clause_type_learnt(0),
		/** !< clause is not subject to the solvers deletion policy */
		clingo_clause_type_static(1),
		/** !< like ::clingo_clause_type_learnt but the clause is deleted after a solving step */
		clingo_clause_type_volatile(2),
		/** !< like ::clingo_clause_type_static but the clause is deleted after a solving step */
		clingo_clause_type_volatile_static(3);
		clingo_clause_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_clause_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_clause_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * ! @ingroup ProgramInspection<br>
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1572</i>
	 */
	public @Name("clingo_heuristic_type") 
	enum clingo_heuristic_type implements IntValuedEnum<clingo_heuristic_type > {
		/** !< set the level of an atom */
		clingo_heuristic_type_level(0),
		/** !< configure which sign to chose for an atom */
		clingo_heuristic_type_sign(1),
		/** !< modify VSIDS factor of an atom */
		clingo_heuristic_type_factor(2),
		/** !< modify the initial VSIDS score of an atom */
		clingo_heuristic_type_init(3),
		/** !< set the level of an atom and choose a positive sign */
		clingo_heuristic_type_true(4),
		/** !< set the level of an atom and choose a negative sign */
		clingo_heuristic_type_false(5);
		clingo_heuristic_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_heuristic_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_heuristic_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * ! @ingroup ProgramInspection<br>
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1586</i>
	 */
	public @Name("clingo_external_type") 
	enum clingo_external_type implements IntValuedEnum<clingo_external_type > {
		/** !< allow an external to be assigned freely */
		clingo_external_type_free(0),
		/** !< assign an external to true */
		clingo_external_type_true(1),
		/** !< assign an external to false */
		clingo_external_type_false(2),
		/** !< no longer treat an atom as external */
		clingo_external_type_release(3);
		clingo_external_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_external_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_external_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * ! Enumeration for entries of the configuration.<br>
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1727</i>
	 */
	public @Name("clingo_configuration_type") 
	enum clingo_configuration_type implements IntValuedEnum<clingo_configuration_type > {
		/** !< the entry is a (string) value */
		clingo_configuration_type_value(1),
		/** !< the entry is an array */
		clingo_configuration_type_array(2),
		/** !< the entry is a map */
		clingo_configuration_type_map(4);
		clingo_configuration_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_configuration_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_configuration_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * ! Enumeration for entries of the statistics.<br>
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1910</i>
	 */
	public @Name("clingo_statistics_type") 
	enum clingo_statistics_type implements IntValuedEnum<clingo_statistics_type > {
		/** !< the entry is invalid (has neither of the types below) */
		clingo_statistics_type_empty(0),
		/** !< the entry is a (string) value */
		clingo_statistics_type_value(1),
		/** !< the entry is an array */
		clingo_statistics_type_array(2),
		/** !< the entry is a map */
		clingo_statistics_type_map(3);
		clingo_statistics_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_statistics_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_statistics_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * ! @{<br>
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:2039</i>
	 */
	public @Name("clingo_ast_comparison_operator") 
	enum clingo_ast_comparison_operator implements IntValuedEnum<clingo_ast_comparison_operator > {
		clingo_ast_comparison_operator_greater_than(0),
		clingo_ast_comparison_operator_less_than(1),
		clingo_ast_comparison_operator_less_equal(2),
		clingo_ast_comparison_operator_greater_equal(3),
		clingo_ast_comparison_operator_not_equal(4),
		clingo_ast_comparison_operator_equal(5);
		clingo_ast_comparison_operator(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_ast_comparison_operator > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_ast_comparison_operator > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:2049</i>
	 */
	public @Name("clingo_ast_sign") 
	enum clingo_ast_sign implements IntValuedEnum<clingo_ast_sign > {
		clingo_ast_sign_none(0),
		clingo_ast_sign_negation(1),
		clingo_ast_sign_double_negation(2);
		clingo_ast_sign(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_ast_sign > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_ast_sign > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * {{{2 terms<br>
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:2058</i>
	 */
	public @Name("clingo_ast_term_type") 
	enum clingo_ast_term_type implements IntValuedEnum<clingo_ast_term_type > {
		clingo_ast_term_type_symbol(0),
		clingo_ast_term_type_variable(1),
		clingo_ast_term_type_unary_operation(2),
		clingo_ast_term_type_binary_operation(3),
		clingo_ast_term_type_interval(4),
		clingo_ast_term_type_function(5),
		clingo_ast_term_type_external_function(6),
		clingo_ast_term_type_pool(7);
		clingo_ast_term_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_ast_term_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_ast_term_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * unary operation<br>
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:2092</i>
	 */
	public @Name("clingo_ast_unary_operator") 
	enum clingo_ast_unary_operator implements IntValuedEnum<clingo_ast_unary_operator > {
		clingo_ast_unary_operator_minus(0),
		clingo_ast_unary_operator_negation(1),
		clingo_ast_unary_operator_absolute(2);
		clingo_ast_unary_operator(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_ast_unary_operator > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_ast_unary_operator > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * binary operation<br>
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:2106</i>
	 */
	public @Name("clingo_ast_binary_operator") 
	enum clingo_ast_binary_operator implements IntValuedEnum<clingo_ast_binary_operator > {
		clingo_ast_binary_operator_xor(0),
		clingo_ast_binary_operator_or(1),
		clingo_ast_binary_operator_and(2),
		clingo_ast_binary_operator_plus(3),
		clingo_ast_binary_operator_minus(4),
		clingo_ast_binary_operator_multiplication(5),
		clingo_ast_binary_operator_division(6),
		clingo_ast_binary_operator_modulo(7);
		clingo_ast_binary_operator(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_ast_binary_operator > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_ast_binary_operator > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:2188</i>
	 */
	public @Name("clingo_ast_literal_type") 
	enum clingo_ast_literal_type implements IntValuedEnum<clingo_ast_literal_type > {
		clingo_ast_literal_type_boolean(0),
		clingo_ast_literal_type_symbolic(1),
		clingo_ast_literal_type_comparison(2),
		clingo_ast_literal_type_csp(3);
		clingo_ast_literal_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_ast_literal_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_ast_literal_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * {{{2 aggregates<br>
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:2210</i>
	 */
	public @Name("clingo_ast_aggregate_function") 
	enum clingo_ast_aggregate_function implements IntValuedEnum<clingo_ast_aggregate_function > {
		clingo_ast_aggregate_function_count(0),
		clingo_ast_aggregate_function_sum(1),
		clingo_ast_aggregate_function_sump(2),
		clingo_ast_aggregate_function_min(3),
		clingo_ast_aggregate_function_max(4);
		clingo_ast_aggregate_function(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_ast_aggregate_function > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_ast_aggregate_function > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * {{{2 theory atom<br>
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:2297</i>
	 */
	public @Name("clingo_ast_theory_term_type") 
	enum clingo_ast_theory_term_type implements IntValuedEnum<clingo_ast_theory_term_type > {
		clingo_ast_theory_term_type_symbol(0),
		clingo_ast_theory_term_type_variable(1),
		clingo_ast_theory_term_type_tuple(2),
		clingo_ast_theory_term_type_list(3),
		clingo_ast_theory_term_type_set(4),
		clingo_ast_theory_term_type_function(5),
		clingo_ast_theory_term_type_unparsed_term(6);
		clingo_ast_theory_term_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_ast_theory_term_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_ast_theory_term_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * {{{2 head literals<br>
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:2369</i>
	 */
	public @Name("clingo_ast_head_literal_type") 
	enum clingo_ast_head_literal_type implements IntValuedEnum<clingo_ast_head_literal_type > {
		clingo_ast_head_literal_type_literal(0),
		clingo_ast_head_literal_type_disjunction(1),
		clingo_ast_head_literal_type_aggregate(2),
		clingo_ast_head_literal_type_head_aggregate(3),
		clingo_ast_head_literal_type_theory_atom(4);
		clingo_ast_head_literal_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_ast_head_literal_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_ast_head_literal_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * {{{2 body literals<br>
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:2392</i>
	 */
	public @Name("clingo_ast_body_literal_type") 
	enum clingo_ast_body_literal_type implements IntValuedEnum<clingo_ast_body_literal_type > {
		clingo_ast_body_literal_type_literal(0),
		clingo_ast_body_literal_type_conditional(1),
		clingo_ast_body_literal_type_aggregate(2),
		clingo_ast_body_literal_type_body_aggregate(3),
		clingo_ast_body_literal_type_theory_atom(4),
		clingo_ast_body_literal_type_disjoint(5);
		clingo_ast_body_literal_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_ast_body_literal_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_ast_body_literal_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * {{{2 theory definitions<br>
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:2419</i>
	 */
	public @Name("clingo_ast_theory_operator_type") 
	enum clingo_ast_theory_operator_type implements IntValuedEnum<clingo_ast_theory_operator_type > {
		clingo_ast_theory_operator_type_unary(0),
		clingo_ast_theory_operator_type_binary_left(1),
		clingo_ast_theory_operator_type_binary_right(2);
		clingo_ast_theory_operator_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_ast_theory_operator_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_ast_theory_operator_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:2446</i>
	 */
	public @Name("clingo_ast_theory_atom_definition_type") 
	enum clingo_ast_theory_atom_definition_type implements IntValuedEnum<clingo_ast_theory_atom_definition_type > {
		clingo_ast_theory_atom_definition_type_head(0),
		clingo_ast_theory_atom_definition_type_body(1),
		clingo_ast_theory_atom_definition_type_any(2),
		clingo_ast_theory_atom_definition_type_directive(3);
		clingo_ast_theory_atom_definition_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_ast_theory_atom_definition_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_ast_theory_atom_definition_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * script<br>
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:2516</i>
	 */
	public @Name("clingo_ast_script_type") 
	enum clingo_ast_script_type implements IntValuedEnum<clingo_ast_script_type > {
		clingo_ast_script_type_lua(0),
		clingo_ast_script_type_python(1);
		clingo_ast_script_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_ast_script_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_ast_script_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * statement<br>
	 * enum values<br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:2573</i>
	 */
	public @Name("clingo_ast_statement_type") 
	enum clingo_ast_statement_type implements IntValuedEnum<clingo_ast_statement_type > {
		clingo_ast_statement_type_rule(0),
		clingo_ast_statement_type_const(1),
		clingo_ast_statement_type_show_signature(2),
		clingo_ast_statement_type_show_term(3),
		clingo_ast_statement_type_minimize(4),
		clingo_ast_statement_type_script(5),
		clingo_ast_statement_type_program(6),
		clingo_ast_statement_type_external(7),
		clingo_ast_statement_type_edge(8),
		clingo_ast_statement_type_heuristic(9),
		clingo_ast_statement_type_project_atom(10),
		clingo_ast_statement_type_project_atom_signature(11),
		clingo_ast_statement_type_theory_definition(12);
		clingo_ast_statement_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<clingo_ast_statement_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<clingo_ast_statement_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/** <i>native declaration : src/main/clingo/lib/c/clingo.h</i> */
	public static final int CLINGO_VERSION_MAJOR = (int)5;
	/** <i>native declaration : src/main/clingo/lib/c/clingo.h</i> */
	public static final int CLINGO_VERSION_MINOR = (int)2;
	/** <i>native declaration : src/main/clingo/lib/c/clingo.h</i> */
	public static final int CLINGO_VERSION_REVISION = (int)2;
	/** <i>native declaration : src/main/clingo/lib/c/clingo.h</i> */
	public static final String CLINGO_VERSION = (String)"5.2.2";
	/** <i>native declaration : src/main/clingo/lib/c/clingo.h</i> */
	public static abstract class clingo_logger_t extends Callback<clingo_logger_t > {
		public void apply(int code, Pointer<Byte > message, Pointer<? > data) {
			apply(code, Pointer.getPeer(message), Pointer.getPeer(data));
		}
		public void apply(int code, @Ptr long message, @Ptr long data) {
			apply(code, (Pointer)Pointer.pointerToAddress(message, Byte.class), Pointer.pointerToAddress(data));
		}
	};
	/** <i>native declaration : src/main/clingo/lib/c/clingo.h</i> */
	public static abstract class clingo_solve_event_callback_t extends Callback<clingo_solve_event_callback_t > {
		public boolean apply(int type, Pointer<? > event, Pointer<? > data, Pointer<Boolean > goon) {
			return apply(type, Pointer.getPeer(event), Pointer.getPeer(data), Pointer.getPeer(goon));
		}
		public boolean apply(int type, @Ptr long event, @Ptr long data, @Ptr long goon) {
			return apply(type, Pointer.pointerToAddress(event), Pointer.pointerToAddress(data), (Pointer)Pointer.pointerToAddress(goon, Boolean.class));
		}
	};
	/** <i>native declaration : src/main/clingo/lib/c/clingo.h</i> */
	public static abstract class clingo_propagator_init_callback_t extends Callback<clingo_propagator_init_callback_t > {
		public boolean apply(Pointer<ClingoLibrary.clingo_propagate_init > clingo_propagate_init_tPtr1, Pointer<? > voidPtr1) {
			return apply(Pointer.getPeer(clingo_propagate_init_tPtr1), Pointer.getPeer(voidPtr1));
		}
		public boolean apply(@Ptr long clingo_propagate_init_tPtr1, @Ptr long voidPtr1) {
			return apply((Pointer)Pointer.pointerToAddress(clingo_propagate_init_tPtr1, ClingoLibrary.clingo_propagate_init.class), Pointer.pointerToAddress(voidPtr1));
		}
	};
	/** <i>native declaration : src/main/clingo/lib/c/clingo.h</i> */
	public static abstract class clingo_propagator_propagate_callback_t extends Callback<clingo_propagator_propagate_callback_t > {
		public boolean apply(Pointer<ClingoLibrary.clingo_propagate_control > clingo_propagate_control_tPtr1, Pointer<Integer > clingo_literal_tPtr1, @Ptr long size_t1, Pointer<? > voidPtr1) {
			return apply(Pointer.getPeer(clingo_propagate_control_tPtr1), Pointer.getPeer(clingo_literal_tPtr1), size_t1, Pointer.getPeer(voidPtr1));
		}
		public boolean apply(@Ptr long clingo_propagate_control_tPtr1, @Ptr long clingo_literal_tPtr1, @Ptr long size_t1, @Ptr long voidPtr1) {
			return apply((Pointer)Pointer.pointerToAddress(clingo_propagate_control_tPtr1, ClingoLibrary.clingo_propagate_control.class), (Pointer)Pointer.pointerToAddress(clingo_literal_tPtr1, Integer.class), size_t1, Pointer.pointerToAddress(voidPtr1));
		}
	};
	/** <i>native declaration : src/main/clingo/lib/c/clingo.h</i> */
	public static abstract class clingo_propagator_undo_callback_t extends Callback<clingo_propagator_undo_callback_t > {
		public boolean apply(Pointer<ClingoLibrary.clingo_propagate_control > clingo_propagate_control_tPtr1, Pointer<Integer > clingo_literal_tPtr1, @Ptr long size_t1, Pointer<? > voidPtr1) {
			return apply(Pointer.getPeer(clingo_propagate_control_tPtr1), Pointer.getPeer(clingo_literal_tPtr1), size_t1, Pointer.getPeer(voidPtr1));
		}
		public boolean apply(@Ptr long clingo_propagate_control_tPtr1, @Ptr long clingo_literal_tPtr1, @Ptr long size_t1, @Ptr long voidPtr1) {
			return apply((Pointer)Pointer.pointerToAddress(clingo_propagate_control_tPtr1, ClingoLibrary.clingo_propagate_control.class), (Pointer)Pointer.pointerToAddress(clingo_literal_tPtr1, Integer.class), size_t1, Pointer.pointerToAddress(voidPtr1));
		}
	};
	/** <i>native declaration : src/main/clingo/lib/c/clingo.h</i> */
	public static abstract class clingo_propagator_check_callback_t extends Callback<clingo_propagator_check_callback_t > {
		public boolean apply(Pointer<ClingoLibrary.clingo_propagate_control > clingo_propagate_control_tPtr1, Pointer<? > voidPtr1) {
			return apply(Pointer.getPeer(clingo_propagate_control_tPtr1), Pointer.getPeer(voidPtr1));
		}
		public boolean apply(@Ptr long clingo_propagate_control_tPtr1, @Ptr long voidPtr1) {
			return apply((Pointer)Pointer.pointerToAddress(clingo_propagate_control_tPtr1, ClingoLibrary.clingo_propagate_control.class), Pointer.pointerToAddress(voidPtr1));
		}
	};
	/** <i>native declaration : src/main/clingo/lib/c/clingo.h</i> */
	public static abstract class clingo_ast_callback_t extends Callback<clingo_ast_callback_t > {
		public boolean apply(Pointer<clingo_ast_statement > clingo_ast_statement_tPtr1, Pointer<? > voidPtr1) {
			return apply(Pointer.getPeer(clingo_ast_statement_tPtr1), Pointer.getPeer(voidPtr1));
		}
		public boolean apply(@Ptr long clingo_ast_statement_tPtr1, @Ptr long voidPtr1) {
			return apply((Pointer)Pointer.pointerToAddress(clingo_ast_statement_tPtr1, clingo_ast_statement.class), Pointer.pointerToAddress(voidPtr1));
		}
	};
	/** <i>native declaration : src/main/clingo/lib/c/clingo.h</i> */
	public static abstract class clingo_symbol_callback_t extends Callback<clingo_symbol_callback_t > {
		public boolean apply(Pointer<Long > symbols, @Ptr long symbols_size, Pointer<? > data) {
			return apply(Pointer.getPeer(symbols), symbols_size, Pointer.getPeer(data));
		}
		public boolean apply(@Ptr long symbols, @Ptr long symbols_size, @Ptr long data) {
			return apply((Pointer)Pointer.pointerToAddress(symbols, Long.class), symbols_size, Pointer.pointerToAddress(data));
		}
	};
	/** <i>native declaration : src/main/clingo/lib/c/clingo.h</i> */
	public static abstract class clingo_ground_callback_t extends Callback<clingo_ground_callback_t > {
		public boolean apply(Pointer<clingo_location > location, Pointer<Byte > name, Pointer<Long > arguments, @Ptr long arguments_size, Pointer<? > data, Pointer<ClingoLibrary.clingo_symbol_callback_t > symbol_callback, Pointer<? > symbol_callback_data) {
			return apply(Pointer.getPeer(location), Pointer.getPeer(name), Pointer.getPeer(arguments), arguments_size, Pointer.getPeer(data), Pointer.getPeer(symbol_callback), Pointer.getPeer(symbol_callback_data));
		}
		public boolean apply(@Ptr long location, @Ptr long name, @Ptr long arguments, @Ptr long arguments_size, @Ptr long data, @Ptr long symbol_callback, @Ptr long symbol_callback_data) {
			return apply((Pointer)Pointer.pointerToAddress(location, clingo_location.class), (Pointer)Pointer.pointerToAddress(name, Byte.class), (Pointer)Pointer.pointerToAddress(arguments, Long.class), arguments_size, Pointer.pointerToAddress(data), (Pointer)Pointer.pointerToAddress(symbol_callback, ClingoLibrary.clingo_symbol_callback_t.class), Pointer.pointerToAddress(symbol_callback_data));
		}
	};
	/**
	 * ! Convert error code into string.<br>
	 * Original signature : <code>const char* clingo_error_string(clingo_error_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:106</i>
	 */
	@Name("clingo_error_string") 
	public Pointer<Byte > clingo_error_string(int code) {
		return (Pointer)Pointer.pointerToAddress(clingo_error_string$2(code), Byte.class);
	}
	@Name("clingo_error_string") 
	@Ptr 
	protected native long clingo_error_string$2(int code);
	/**
	 * ! @return error code<br>
	 * Original signature : <code>clingo_error_t clingo_error_code()</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:110</i>
	 */
	@Name("clingo_error_code") 
	public native int clingo_error_code();
	/**
	 * ! @return error message or NULL<br>
	 * Original signature : <code>const char* clingo_error_message()</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:114</i>
	 */
	@Name("clingo_error_message") 
	public Pointer<Byte > clingo_error_message() {
		return (Pointer)Pointer.pointerToAddress(clingo_error_message$2(), Byte.class);
	}
	@Name("clingo_error_message") 
	@Ptr 
	protected native long clingo_error_message$2();
	/**
	 * ! @param[in] message the error message<br>
	 * Original signature : <code>void clingo_set_error(clingo_error_t, const char*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:118</i>
	 */
	@Name("clingo_set_error") 
	public void clingo_set_error(int code, Pointer<Byte > message) {
		clingo_set_error(code, Pointer.getPeer(message));
	}
	@Name("clingo_set_error") 
	protected native void clingo_set_error(int code, @Ptr long message);
	/**
	 * ! Convert warning code into string.<br>
	 * Original signature : <code>const char* clingo_warning_string(clingo_warning_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:133</i>
	 */
	@Name("clingo_warning_string") 
	public Pointer<Byte > clingo_warning_string(int code) {
		return (Pointer)Pointer.pointerToAddress(clingo_warning_string$2(code), Byte.class);
	}
	@Name("clingo_warning_string") 
	@Ptr 
	protected native long clingo_warning_string$2(int code);
	/**
	 * ! @param[out] revision revision number<br>
	 * Original signature : <code>void clingo_version(int*, int*, int*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:150</i>
	 */
	@Name("clingo_version") 
	public void clingo_version(Pointer<Integer > major, Pointer<Integer > minor, Pointer<Integer > revision) {
		clingo_version(Pointer.getPeer(major), Pointer.getPeer(minor), Pointer.getPeer(revision));
	}
	@Name("clingo_version") 
	protected native void clingo_version(@Ptr long major, @Ptr long minor, @Ptr long revision);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_signature_create(const char*, uint32_t, bool, clingo_signature_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:222</i>
	 */
	@Name("clingo_signature_create") 
	public boolean clingo_signature_create(Pointer<Byte > name, int arity, boolean positive, Pointer<Long > signature) {
		return clingo_signature_create(Pointer.getPeer(name), arity, positive, Pointer.getPeer(signature));
	}
	@Name("clingo_signature_create") 
	protected native boolean clingo_signature_create(@Ptr long name, int arity, boolean positive, @Ptr long signature);
	/**
	 * ! @return the name of the signature<br>
	 * Original signature : <code>const char* clingo_signature_name(clingo_signature_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:227</i>
	 */
	@Name("clingo_signature_name") 
	public Pointer<Byte > clingo_signature_name(long signature) {
		return (Pointer)Pointer.pointerToAddress(clingo_signature_name$2(signature), Byte.class);
	}
	@Name("clingo_signature_name") 
	@Ptr 
	protected native long clingo_signature_name$2(long signature);
	/**
	 * ! @return the arity of the signature<br>
	 * Original signature : <code>uint32_t clingo_signature_arity(clingo_signature_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:232</i>
	 */
	@Name("clingo_signature_arity") 
	public native int clingo_signature_arity(long signature);
	/**
	 * ! @return whether the signature has no sign<br>
	 * Original signature : <code>bool clingo_signature_is_positive(clingo_signature_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:237</i>
	 */
	@Name("clingo_signature_is_positive") 
	public native boolean clingo_signature_is_positive(long signature);
	/**
	 * ! @return whether the signature has a sign<br>
	 * Original signature : <code>bool clingo_signature_is_negative(clingo_signature_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:242</i>
	 */
	@Name("clingo_signature_is_negative") 
	public native boolean clingo_signature_is_negative(long signature);
	/**
	 * ! @return whether a == b<br>
	 * Original signature : <code>bool clingo_signature_is_equal_to(clingo_signature_t, clingo_signature_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:248</i>
	 */
	@Name("clingo_signature_is_equal_to") 
	public native boolean clingo_signature_is_equal_to(long a, long b);
	/**
	 * ! @return whether a < b<br>
	 * Original signature : <code>bool clingo_signature_is_less_than(clingo_signature_t, clingo_signature_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:257</i>
	 */
	@Name("clingo_signature_is_less_than") 
	public native boolean clingo_signature_is_less_than(long a, long b);
	/**
	 * ! @return the hash code of the signature<br>
	 * Original signature : <code>size_t clingo_signature_hash(clingo_signature_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:262</i>
	 */
	@Name("clingo_signature_hash") 
	@Ptr 
	public native long clingo_signature_hash(long signature);
	/**
	 * ! @param[out] symbol the resulting symbol<br>
	 * Original signature : <code>void clingo_symbol_create_number(int, clingo_symbol_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:296</i>
	 */
	@Name("clingo_symbol_create_number") 
	public void clingo_symbol_create_number(int number, Pointer<Long > symbol) {
		clingo_symbol_create_number(number, Pointer.getPeer(symbol));
	}
	@Name("clingo_symbol_create_number") 
	protected native void clingo_symbol_create_number(int number, @Ptr long symbol);
	/**
	 * ! @param[out] symbol the resulting symbol<br>
	 * Original signature : <code>void clingo_symbol_create_supremum(clingo_symbol_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:300</i>
	 */
	@Name("clingo_symbol_create_supremum") 
	public void clingo_symbol_create_supremum(Pointer<Long > symbol) {
		clingo_symbol_create_supremum(Pointer.getPeer(symbol));
	}
	@Name("clingo_symbol_create_supremum") 
	protected native void clingo_symbol_create_supremum(@Ptr long symbol);
	/**
	 * ! @param[out] symbol the resulting symbol<br>
	 * Original signature : <code>void clingo_symbol_create_infimum(clingo_symbol_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:304</i>
	 */
	@Name("clingo_symbol_create_infimum") 
	public void clingo_symbol_create_infimum(Pointer<Long > symbol) {
		clingo_symbol_create_infimum(Pointer.getPeer(symbol));
	}
	@Name("clingo_symbol_create_infimum") 
	protected native void clingo_symbol_create_infimum(@Ptr long symbol);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_symbol_create_string(const char*, clingo_symbol_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:311</i>
	 */
	@Name("clingo_symbol_create_string") 
	public boolean clingo_symbol_create_string(Pointer<Byte > string, Pointer<Long > symbol) {
		return clingo_symbol_create_string(Pointer.getPeer(string), Pointer.getPeer(symbol));
	}
	@Name("clingo_symbol_create_string") 
	protected native boolean clingo_symbol_create_string(@Ptr long string, @Ptr long symbol);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_symbol_create_id(const char*, bool, clingo_symbol_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:322</i>
	 */
	@Name("clingo_symbol_create_id") 
	public boolean clingo_symbol_create_id(Pointer<Byte > name, boolean positive, Pointer<Long > symbol) {
		return clingo_symbol_create_id(Pointer.getPeer(name), positive, Pointer.getPeer(symbol));
	}
	@Name("clingo_symbol_create_id") 
	protected native boolean clingo_symbol_create_id(@Ptr long name, boolean positive, @Ptr long symbol);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_symbol_create_function(const char*, const clingo_symbol_t*, size_t, bool, clingo_symbol_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:334</i>
	 */
	@Name("clingo_symbol_create_function") 
	public boolean clingo_symbol_create_function(Pointer<Byte > name, Pointer<Long > arguments, @Ptr long arguments_size, boolean positive, Pointer<Long > symbol) {
		return clingo_symbol_create_function(Pointer.getPeer(name), Pointer.getPeer(arguments), arguments_size, positive, Pointer.getPeer(symbol));
	}
	@Name("clingo_symbol_create_function") 
	protected native boolean clingo_symbol_create_function(@Ptr long name, @Ptr long arguments, @Ptr long arguments_size, boolean positive, @Ptr long symbol);
	/**
	 * ! - ::clingo_error_runtime if symbol is not of type ::clingo_symbol_type_number<br>
	 * Original signature : <code>bool clingo_symbol_number(clingo_symbol_t, int*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:347</i>
	 */
	@Name("clingo_symbol_number") 
	public boolean clingo_symbol_number(long symbol, Pointer<Integer > number) {
		return clingo_symbol_number(symbol, Pointer.getPeer(number));
	}
	@Name("clingo_symbol_number") 
	protected native boolean clingo_symbol_number(long symbol, @Ptr long number);
	/**
	 * ! - ::clingo_error_runtime if symbol is not of type ::clingo_symbol_type_function<br>
	 * Original signature : <code>bool clingo_symbol_name(clingo_symbol_t, const char**)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:354</i>
	 */
	@Name("clingo_symbol_name") 
	public boolean clingo_symbol_name(long symbol, Pointer<Pointer<Byte > > name) {
		return clingo_symbol_name(symbol, Pointer.getPeer(name));
	}
	@Name("clingo_symbol_name") 
	protected native boolean clingo_symbol_name(long symbol, @Ptr long name);
	/**
	 * ! - ::clingo_error_runtime if symbol is not of type ::clingo_symbol_type_string<br>
	 * Original signature : <code>bool clingo_symbol_string(clingo_symbol_t, const char**)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:361</i>
	 */
	@Name("clingo_symbol_string") 
	public boolean clingo_symbol_string(long symbol, Pointer<Pointer<Byte > > string) {
		return clingo_symbol_string(symbol, Pointer.getPeer(string));
	}
	@Name("clingo_symbol_string") 
	protected native boolean clingo_symbol_string(long symbol, @Ptr long string);
	/**
	 * ! - ::clingo_error_runtime if symbol is not of type ::clingo_symbol_type_function<br>
	 * Original signature : <code>bool clingo_symbol_is_positive(clingo_symbol_t, bool*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:368</i>
	 */
	@Name("clingo_symbol_is_positive") 
	public boolean clingo_symbol_is_positive(long symbol, Pointer<Boolean > positive) {
		return clingo_symbol_is_positive(symbol, Pointer.getPeer(positive));
	}
	@Name("clingo_symbol_is_positive") 
	protected native boolean clingo_symbol_is_positive(long symbol, @Ptr long positive);
	/**
	 * ! - ::clingo_error_runtime if symbol is not of type ::clingo_symbol_type_function<br>
	 * Original signature : <code>bool clingo_symbol_is_negative(clingo_symbol_t, bool*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:375</i>
	 */
	@Name("clingo_symbol_is_negative") 
	public boolean clingo_symbol_is_negative(long symbol, Pointer<Boolean > negative) {
		return clingo_symbol_is_negative(symbol, Pointer.getPeer(negative));
	}
	@Name("clingo_symbol_is_negative") 
	protected native boolean clingo_symbol_is_negative(long symbol, @Ptr long negative);
	/**
	 * ! - ::clingo_error_runtime if symbol is not of type ::clingo_symbol_type_function<br>
	 * Original signature : <code>bool clingo_symbol_arguments(clingo_symbol_t, const clingo_symbol_t**, size_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:383</i>
	 */
	@Name("clingo_symbol_arguments") 
	public boolean clingo_symbol_arguments(long symbol, Pointer<Pointer<Long > > arguments, Pointer<SizeT > arguments_size) {
		return clingo_symbol_arguments(symbol, Pointer.getPeer(arguments), Pointer.getPeer(arguments_size));
	}
	@Name("clingo_symbol_arguments") 
	protected native boolean clingo_symbol_arguments(long symbol, @Ptr long arguments, @Ptr long arguments_size);
	/**
	 * ! @return the type of the symbol<br>
	 * Original signature : <code>clingo_symbol_type_t clingo_symbol_type(clingo_symbol_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:388</i>
	 */
	@Name("clingo_symbol_type") 
	public native int clingo_symbol_type(long symbol);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_symbol_to_string_size(clingo_symbol_t, size_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:395</i>
	 */
	@Name("clingo_symbol_to_string_size") 
	public boolean clingo_symbol_to_string_size(long symbol, Pointer<SizeT > size) {
		return clingo_symbol_to_string_size(symbol, Pointer.getPeer(size));
	}
	@Name("clingo_symbol_to_string_size") 
	protected native boolean clingo_symbol_to_string_size(long symbol, @Ptr long size);
	/**
	 * ! @see clingo_symbol_to_string_size()<br>
	 * Original signature : <code>bool clingo_symbol_to_string(clingo_symbol_t, char*, size_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:405</i>
	 */
	@Name("clingo_symbol_to_string") 
	public boolean clingo_symbol_to_string(long symbol, Pointer<Byte > string, @Ptr long size) {
		return clingo_symbol_to_string(symbol, Pointer.getPeer(string), size);
	}
	@Name("clingo_symbol_to_string") 
	protected native boolean clingo_symbol_to_string(long symbol, @Ptr long string, @Ptr long size);
	/**
	 * ! @return whether a == b<br>
	 * Original signature : <code>bool clingo_symbol_is_equal_to(clingo_symbol_t, clingo_symbol_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:417</i>
	 */
	@Name("clingo_symbol_is_equal_to") 
	public native boolean clingo_symbol_is_equal_to(long a, long b);
	/**
	 * ! @return whether a < b<br>
	 * Original signature : <code>bool clingo_symbol_is_less_than(clingo_symbol_t, clingo_symbol_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:427</i>
	 */
	@Name("clingo_symbol_is_less_than") 
	public native boolean clingo_symbol_is_less_than(long a, long b);
	/**
	 * ! @return the hash code of the symbol<br>
	 * Original signature : <code>size_t clingo_symbol_hash(clingo_symbol_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:432</i>
	 */
	@Name("clingo_symbol_hash") 
	@Ptr 
	public native long clingo_symbol_hash(long symbol);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_add_string(const char*, const char**)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:446</i>
	 */
	@Name("clingo_add_string") 
	public boolean clingo_add_string(Pointer<Byte > string, Pointer<Pointer<Byte > > result) {
		return clingo_add_string(Pointer.getPeer(string), Pointer.getPeer(result));
	}
	@Name("clingo_add_string") 
	protected native boolean clingo_add_string(@Ptr long string, @Ptr long result);
	/**
	 * ! - ::clingo_error_runtime if parsing fails<br>
	 * Original signature : <code>bool clingo_parse_term(const char*, clingo_logger_t, void*, unsigned, clingo_symbol_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:460</i>
	 */
	@Name("clingo_parse_term") 
	public boolean clingo_parse_term(Pointer<Byte > string, Pointer<ClingoLibrary.clingo_logger_t > logger, Pointer<? > logger_data, int message_limit, Pointer<Long > symbol) {
		return clingo_parse_term(Pointer.getPeer(string), Pointer.getPeer(logger), Pointer.getPeer(logger_data), message_limit, Pointer.getPeer(symbol));
	}
	@Name("clingo_parse_term") 
	protected native boolean clingo_parse_term(@Ptr long string, @Ptr long logger, @Ptr long logger_data, int message_limit, @Ptr long symbol);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_symbolic_atoms_size(clingo_symbolic_atoms_t*, size_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:510</i>
	 */
	@Name("clingo_symbolic_atoms_size") 
	public boolean clingo_symbolic_atoms_size(Pointer<ClingoLibrary.clingo_symbolic_atoms > atoms, Pointer<SizeT > size) {
		return clingo_symbolic_atoms_size(Pointer.getPeer(atoms), Pointer.getPeer(size));
	}
	@Name("clingo_symbolic_atoms_size") 
	protected native boolean clingo_symbolic_atoms_size(@Ptr long atoms, @Ptr long size);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_symbolic_atoms_begin(clingo_symbolic_atoms_t*, const clingo_signature_t*, clingo_symbolic_atom_iterator_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:518</i>
	 */
	@Name("clingo_symbolic_atoms_begin") 
	public boolean clingo_symbolic_atoms_begin(Pointer<ClingoLibrary.clingo_symbolic_atoms > atoms, Pointer<Long > signature, Pointer<Long > iterator) {
		return clingo_symbolic_atoms_begin(Pointer.getPeer(atoms), Pointer.getPeer(signature), Pointer.getPeer(iterator));
	}
	@Name("clingo_symbolic_atoms_begin") 
	protected native boolean clingo_symbolic_atoms_begin(@Ptr long atoms, @Ptr long signature, @Ptr long iterator);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_symbolic_atoms_end(clingo_symbolic_atoms_t*, clingo_symbolic_atom_iterator_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:524</i>
	 */
	@Name("clingo_symbolic_atoms_end") 
	public boolean clingo_symbolic_atoms_end(Pointer<ClingoLibrary.clingo_symbolic_atoms > atoms, Pointer<Long > iterator) {
		return clingo_symbolic_atoms_end(Pointer.getPeer(atoms), Pointer.getPeer(iterator));
	}
	@Name("clingo_symbolic_atoms_end") 
	protected native boolean clingo_symbolic_atoms_end(@Ptr long atoms, @Ptr long iterator);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_symbolic_atoms_find(clingo_symbolic_atoms_t*, clingo_symbol_t, clingo_symbolic_atom_iterator_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:532</i>
	 */
	@Name("clingo_symbolic_atoms_find") 
	public boolean clingo_symbolic_atoms_find(Pointer<ClingoLibrary.clingo_symbolic_atoms > atoms, long symbol, Pointer<Long > iterator) {
		return clingo_symbolic_atoms_find(Pointer.getPeer(atoms), symbol, Pointer.getPeer(iterator));
	}
	@Name("clingo_symbolic_atoms_find") 
	protected native boolean clingo_symbolic_atoms_find(@Ptr long atoms, long symbol, @Ptr long iterator);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_symbolic_atoms_iterator_is_equal_to(clingo_symbolic_atoms_t*, clingo_symbolic_atom_iterator_t, clingo_symbolic_atom_iterator_t, bool*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:540</i>
	 */
	@Name("clingo_symbolic_atoms_iterator_is_equal_to") 
	public boolean clingo_symbolic_atoms_iterator_is_equal_to(Pointer<ClingoLibrary.clingo_symbolic_atoms > atoms, long a, long b, Pointer<Boolean > equal) {
		return clingo_symbolic_atoms_iterator_is_equal_to(Pointer.getPeer(atoms), a, b, Pointer.getPeer(equal));
	}
	@Name("clingo_symbolic_atoms_iterator_is_equal_to") 
	protected native boolean clingo_symbolic_atoms_iterator_is_equal_to(@Ptr long atoms, long a, long b, @Ptr long equal);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_symbolic_atoms_symbol(clingo_symbolic_atoms_t*, clingo_symbolic_atom_iterator_t, clingo_symbol_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:547</i>
	 */
	@Name("clingo_symbolic_atoms_symbol") 
	public boolean clingo_symbolic_atoms_symbol(Pointer<ClingoLibrary.clingo_symbolic_atoms > atoms, long iterator, Pointer<Long > symbol) {
		return clingo_symbolic_atoms_symbol(Pointer.getPeer(atoms), iterator, Pointer.getPeer(symbol));
	}
	@Name("clingo_symbolic_atoms_symbol") 
	protected native boolean clingo_symbolic_atoms_symbol(@Ptr long atoms, long iterator, @Ptr long symbol);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_symbolic_atoms_is_fact(clingo_symbolic_atoms_t*, clingo_symbolic_atom_iterator_t, bool*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:558</i>
	 */
	@Name("clingo_symbolic_atoms_is_fact") 
	public boolean clingo_symbolic_atoms_is_fact(Pointer<ClingoLibrary.clingo_symbolic_atoms > atoms, long iterator, Pointer<Boolean > fact) {
		return clingo_symbolic_atoms_is_fact(Pointer.getPeer(atoms), iterator, Pointer.getPeer(fact));
	}
	@Name("clingo_symbolic_atoms_is_fact") 
	protected native boolean clingo_symbolic_atoms_is_fact(@Ptr long atoms, long iterator, @Ptr long fact);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_symbolic_atoms_is_external(clingo_symbolic_atoms_t*, clingo_symbolic_atom_iterator_t, bool*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:568</i>
	 */
	@Name("clingo_symbolic_atoms_is_external") 
	public boolean clingo_symbolic_atoms_is_external(Pointer<ClingoLibrary.clingo_symbolic_atoms > atoms, long iterator, Pointer<Boolean > external) {
		return clingo_symbolic_atoms_is_external(Pointer.getPeer(atoms), iterator, Pointer.getPeer(external));
	}
	@Name("clingo_symbolic_atoms_is_external") 
	protected native boolean clingo_symbolic_atoms_is_external(@Ptr long atoms, long iterator, @Ptr long external);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_symbolic_atoms_literal(clingo_symbolic_atoms_t*, clingo_symbolic_atom_iterator_t, clingo_literal_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:579</i>
	 */
	@Name("clingo_symbolic_atoms_literal") 
	public boolean clingo_symbolic_atoms_literal(Pointer<ClingoLibrary.clingo_symbolic_atoms > atoms, long iterator, Pointer<Integer > literal) {
		return clingo_symbolic_atoms_literal(Pointer.getPeer(atoms), iterator, Pointer.getPeer(literal));
	}
	@Name("clingo_symbolic_atoms_literal") 
	protected native boolean clingo_symbolic_atoms_literal(@Ptr long atoms, long iterator, @Ptr long literal);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_symbolic_atoms_signatures_size(clingo_symbolic_atoms_t*, size_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:585</i>
	 */
	@Name("clingo_symbolic_atoms_signatures_size") 
	public boolean clingo_symbolic_atoms_signatures_size(Pointer<ClingoLibrary.clingo_symbolic_atoms > atoms, Pointer<SizeT > size) {
		return clingo_symbolic_atoms_signatures_size(Pointer.getPeer(atoms), Pointer.getPeer(size));
	}
	@Name("clingo_symbolic_atoms_signatures_size") 
	protected native boolean clingo_symbolic_atoms_signatures_size(@Ptr long atoms, @Ptr long size);
	/**
	 * ! @see clingo_symbolic_atoms_signatures_size()<br>
	 * Original signature : <code>bool clingo_symbolic_atoms_signatures(clingo_symbolic_atoms_t*, clingo_signature_t*, size_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:596</i>
	 */
	@Name("clingo_symbolic_atoms_signatures") 
	public boolean clingo_symbolic_atoms_signatures(Pointer<ClingoLibrary.clingo_symbolic_atoms > atoms, Pointer<Long > signatures, @Ptr long size) {
		return clingo_symbolic_atoms_signatures(Pointer.getPeer(atoms), Pointer.getPeer(signatures), size);
	}
	@Name("clingo_symbolic_atoms_signatures") 
	protected native boolean clingo_symbolic_atoms_signatures(@Ptr long atoms, @Ptr long signatures, @Ptr long size);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_symbolic_atoms_next(clingo_symbolic_atoms_t*, clingo_symbolic_atom_iterator_t, clingo_symbolic_atom_iterator_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:603</i>
	 */
	@Name("clingo_symbolic_atoms_next") 
	public boolean clingo_symbolic_atoms_next(Pointer<ClingoLibrary.clingo_symbolic_atoms > atoms, long iterator, Pointer<Long > next) {
		return clingo_symbolic_atoms_next(Pointer.getPeer(atoms), iterator, Pointer.getPeer(next));
	}
	@Name("clingo_symbolic_atoms_next") 
	protected native boolean clingo_symbolic_atoms_next(@Ptr long atoms, long iterator, @Ptr long next);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_symbolic_atoms_is_valid(clingo_symbolic_atoms_t*, clingo_symbolic_atom_iterator_t, bool*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:612</i>
	 */
	@Name("clingo_symbolic_atoms_is_valid") 
	public boolean clingo_symbolic_atoms_is_valid(Pointer<ClingoLibrary.clingo_symbolic_atoms > atoms, long iterator, Pointer<Boolean > valid) {
		return clingo_symbolic_atoms_is_valid(Pointer.getPeer(atoms), iterator, Pointer.getPeer(valid));
	}
	@Name("clingo_symbolic_atoms_is_valid") 
	protected native boolean clingo_symbolic_atoms_is_valid(@Ptr long atoms, long iterator, @Ptr long valid);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_theory_atoms_term_type(clingo_theory_atoms_t*, clingo_id_t, clingo_theory_term_type_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:680</i>
	 */
	@Name("clingo_theory_atoms_term_type") 
	public boolean clingo_theory_atoms_term_type(Pointer<ClingoLibrary.clingo_theory_atoms > atoms, int term, Pointer<Integer > type) {
		return clingo_theory_atoms_term_type(Pointer.getPeer(atoms), term, Pointer.getPeer(type));
	}
	@Name("clingo_theory_atoms_term_type") 
	protected native boolean clingo_theory_atoms_term_type(@Ptr long atoms, int term, @Ptr long type);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_theory_atoms_term_number(clingo_theory_atoms_t*, clingo_id_t, int*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:688</i>
	 */
	@Name("clingo_theory_atoms_term_number") 
	public boolean clingo_theory_atoms_term_number(Pointer<ClingoLibrary.clingo_theory_atoms > atoms, int term, Pointer<Integer > number) {
		return clingo_theory_atoms_term_number(Pointer.getPeer(atoms), term, Pointer.getPeer(number));
	}
	@Name("clingo_theory_atoms_term_number") 
	protected native boolean clingo_theory_atoms_term_number(@Ptr long atoms, int term, @Ptr long number);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_theory_atoms_term_name(clingo_theory_atoms_t*, clingo_id_t, const char**)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:696</i>
	 */
	@Name("clingo_theory_atoms_term_name") 
	public boolean clingo_theory_atoms_term_name(Pointer<ClingoLibrary.clingo_theory_atoms > atoms, int term, Pointer<Pointer<Byte > > name) {
		return clingo_theory_atoms_term_name(Pointer.getPeer(atoms), term, Pointer.getPeer(name));
	}
	@Name("clingo_theory_atoms_term_name") 
	protected native boolean clingo_theory_atoms_term_name(@Ptr long atoms, int term, @Ptr long name);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_theory_atoms_term_arguments(clingo_theory_atoms_t*, clingo_id_t, const clingo_id_t**, size_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:705</i>
	 */
	@Name("clingo_theory_atoms_term_arguments") 
	public boolean clingo_theory_atoms_term_arguments(Pointer<ClingoLibrary.clingo_theory_atoms > atoms, int term, Pointer<Pointer<Integer > > arguments, Pointer<SizeT > size) {
		return clingo_theory_atoms_term_arguments(Pointer.getPeer(atoms), term, Pointer.getPeer(arguments), Pointer.getPeer(size));
	}
	@Name("clingo_theory_atoms_term_arguments") 
	protected native boolean clingo_theory_atoms_term_arguments(@Ptr long atoms, int term, @Ptr long arguments, @Ptr long size);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_theory_atoms_term_to_string_size(clingo_theory_atoms_t*, clingo_id_t, size_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:713</i>
	 */
	@Name("clingo_theory_atoms_term_to_string_size") 
	public boolean clingo_theory_atoms_term_to_string_size(Pointer<ClingoLibrary.clingo_theory_atoms > atoms, int term, Pointer<SizeT > size) {
		return clingo_theory_atoms_term_to_string_size(Pointer.getPeer(atoms), term, Pointer.getPeer(size));
	}
	@Name("clingo_theory_atoms_term_to_string_size") 
	protected native boolean clingo_theory_atoms_term_to_string_size(@Ptr long atoms, int term, @Ptr long size);
	/**
	 * ! @see clingo_theory_atoms_term_to_string_size()<br>
	 * Original signature : <code>bool clingo_theory_atoms_term_to_string(clingo_theory_atoms_t*, clingo_id_t, char*, size_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:725</i>
	 */
	@Name("clingo_theory_atoms_term_to_string") 
	public boolean clingo_theory_atoms_term_to_string(Pointer<ClingoLibrary.clingo_theory_atoms > atoms, int term, Pointer<Byte > string, @Ptr long size) {
		return clingo_theory_atoms_term_to_string(Pointer.getPeer(atoms), term, Pointer.getPeer(string), size);
	}
	@Name("clingo_theory_atoms_term_to_string") 
	protected native boolean clingo_theory_atoms_term_to_string(@Ptr long atoms, int term, @Ptr long string, @Ptr long size);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_theory_atoms_element_tuple(clingo_theory_atoms_t*, clingo_id_t, const clingo_id_t**, size_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:738</i>
	 */
	@Name("clingo_theory_atoms_element_tuple") 
	public boolean clingo_theory_atoms_element_tuple(Pointer<ClingoLibrary.clingo_theory_atoms > atoms, int element, Pointer<Pointer<Integer > > tuple, Pointer<SizeT > size) {
		return clingo_theory_atoms_element_tuple(Pointer.getPeer(atoms), element, Pointer.getPeer(tuple), Pointer.getPeer(size));
	}
	@Name("clingo_theory_atoms_element_tuple") 
	protected native boolean clingo_theory_atoms_element_tuple(@Ptr long atoms, int element, @Ptr long tuple, @Ptr long size);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_theory_atoms_element_condition(clingo_theory_atoms_t*, clingo_id_t, const clingo_literal_t**, size_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:746</i>
	 */
	@Name("clingo_theory_atoms_element_condition") 
	public boolean clingo_theory_atoms_element_condition(Pointer<ClingoLibrary.clingo_theory_atoms > atoms, int element, Pointer<Pointer<Integer > > condition, Pointer<SizeT > size) {
		return clingo_theory_atoms_element_condition(Pointer.getPeer(atoms), element, Pointer.getPeer(condition), Pointer.getPeer(size));
	}
	@Name("clingo_theory_atoms_element_condition") 
	protected native boolean clingo_theory_atoms_element_condition(@Ptr long atoms, int element, @Ptr long condition, @Ptr long size);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_theory_atoms_element_condition_id(clingo_theory_atoms_t*, clingo_id_t, clingo_literal_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:758</i>
	 */
	@Name("clingo_theory_atoms_element_condition_id") 
	public boolean clingo_theory_atoms_element_condition_id(Pointer<ClingoLibrary.clingo_theory_atoms > atoms, int element, Pointer<Integer > condition) {
		return clingo_theory_atoms_element_condition_id(Pointer.getPeer(atoms), element, Pointer.getPeer(condition));
	}
	@Name("clingo_theory_atoms_element_condition_id") 
	protected native boolean clingo_theory_atoms_element_condition_id(@Ptr long atoms, int element, @Ptr long condition);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_theory_atoms_element_to_string_size(clingo_theory_atoms_t*, clingo_id_t, size_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:766</i>
	 */
	@Name("clingo_theory_atoms_element_to_string_size") 
	public boolean clingo_theory_atoms_element_to_string_size(Pointer<ClingoLibrary.clingo_theory_atoms > atoms, int element, Pointer<SizeT > size) {
		return clingo_theory_atoms_element_to_string_size(Pointer.getPeer(atoms), element, Pointer.getPeer(size));
	}
	@Name("clingo_theory_atoms_element_to_string_size") 
	protected native boolean clingo_theory_atoms_element_to_string_size(@Ptr long atoms, int element, @Ptr long size);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_theory_atoms_element_to_string(clingo_theory_atoms_t*, clingo_id_t, char*, size_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:776</i>
	 */
	@Name("clingo_theory_atoms_element_to_string") 
	public boolean clingo_theory_atoms_element_to_string(Pointer<ClingoLibrary.clingo_theory_atoms > atoms, int element, Pointer<Byte > string, @Ptr long size) {
		return clingo_theory_atoms_element_to_string(Pointer.getPeer(atoms), element, Pointer.getPeer(string), size);
	}
	@Name("clingo_theory_atoms_element_to_string") 
	protected native boolean clingo_theory_atoms_element_to_string(@Ptr long atoms, int element, @Ptr long string, @Ptr long size);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_theory_atoms_size(clingo_theory_atoms_t*, size_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:787</i>
	 */
	@Name("clingo_theory_atoms_size") 
	public boolean clingo_theory_atoms_size(Pointer<ClingoLibrary.clingo_theory_atoms > atoms, Pointer<SizeT > size) {
		return clingo_theory_atoms_size(Pointer.getPeer(atoms), Pointer.getPeer(size));
	}
	@Name("clingo_theory_atoms_size") 
	protected native boolean clingo_theory_atoms_size(@Ptr long atoms, @Ptr long size);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_theory_atoms_atom_term(clingo_theory_atoms_t*, clingo_id_t, clingo_id_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:794</i>
	 */
	@Name("clingo_theory_atoms_atom_term") 
	public boolean clingo_theory_atoms_atom_term(Pointer<ClingoLibrary.clingo_theory_atoms > atoms, int atom, Pointer<Integer > term) {
		return clingo_theory_atoms_atom_term(Pointer.getPeer(atoms), atom, Pointer.getPeer(term));
	}
	@Name("clingo_theory_atoms_atom_term") 
	protected native boolean clingo_theory_atoms_atom_term(@Ptr long atoms, int atom, @Ptr long term);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_theory_atoms_atom_elements(clingo_theory_atoms_t*, clingo_id_t, const clingo_id_t**, size_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:802</i>
	 */
	@Name("clingo_theory_atoms_atom_elements") 
	public boolean clingo_theory_atoms_atom_elements(Pointer<ClingoLibrary.clingo_theory_atoms > atoms, int atom, Pointer<Pointer<Integer > > elements, Pointer<SizeT > size) {
		return clingo_theory_atoms_atom_elements(Pointer.getPeer(atoms), atom, Pointer.getPeer(elements), Pointer.getPeer(size));
	}
	@Name("clingo_theory_atoms_atom_elements") 
	protected native boolean clingo_theory_atoms_atom_elements(@Ptr long atoms, int atom, @Ptr long elements, @Ptr long size);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_theory_atoms_atom_has_guard(clingo_theory_atoms_t*, clingo_id_t, bool*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:809</i>
	 */
	@Name("clingo_theory_atoms_atom_has_guard") 
	public boolean clingo_theory_atoms_atom_has_guard(Pointer<ClingoLibrary.clingo_theory_atoms > atoms, int atom, Pointer<Boolean > has_guard) {
		return clingo_theory_atoms_atom_has_guard(Pointer.getPeer(atoms), atom, Pointer.getPeer(has_guard));
	}
	@Name("clingo_theory_atoms_atom_has_guard") 
	protected native boolean clingo_theory_atoms_atom_has_guard(@Ptr long atoms, int atom, @Ptr long has_guard);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_theory_atoms_atom_guard(clingo_theory_atoms_t*, clingo_id_t, const char**, clingo_id_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:817</i>
	 */
	@Name("clingo_theory_atoms_atom_guard") 
	public boolean clingo_theory_atoms_atom_guard(Pointer<ClingoLibrary.clingo_theory_atoms > atoms, int atom, Pointer<Pointer<Byte > > connective, Pointer<Integer > term) {
		return clingo_theory_atoms_atom_guard(Pointer.getPeer(atoms), atom, Pointer.getPeer(connective), Pointer.getPeer(term));
	}
	@Name("clingo_theory_atoms_atom_guard") 
	protected native boolean clingo_theory_atoms_atom_guard(@Ptr long atoms, int atom, @Ptr long connective, @Ptr long term);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_theory_atoms_atom_literal(clingo_theory_atoms_t*, clingo_id_t, clingo_literal_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:824</i>
	 */
	@Name("clingo_theory_atoms_atom_literal") 
	public boolean clingo_theory_atoms_atom_literal(Pointer<ClingoLibrary.clingo_theory_atoms > atoms, int atom, Pointer<Integer > literal) {
		return clingo_theory_atoms_atom_literal(Pointer.getPeer(atoms), atom, Pointer.getPeer(literal));
	}
	@Name("clingo_theory_atoms_atom_literal") 
	protected native boolean clingo_theory_atoms_atom_literal(@Ptr long atoms, int atom, @Ptr long literal);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_theory_atoms_atom_to_string_size(clingo_theory_atoms_t*, clingo_id_t, size_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:832</i>
	 */
	@Name("clingo_theory_atoms_atom_to_string_size") 
	public boolean clingo_theory_atoms_atom_to_string_size(Pointer<ClingoLibrary.clingo_theory_atoms > atoms, int atom, Pointer<SizeT > size) {
		return clingo_theory_atoms_atom_to_string_size(Pointer.getPeer(atoms), atom, Pointer.getPeer(size));
	}
	@Name("clingo_theory_atoms_atom_to_string_size") 
	protected native boolean clingo_theory_atoms_atom_to_string_size(@Ptr long atoms, int atom, @Ptr long size);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_theory_atoms_atom_to_string(clingo_theory_atoms_t*, clingo_id_t, char*, size_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:842</i>
	 */
	@Name("clingo_theory_atoms_atom_to_string") 
	public boolean clingo_theory_atoms_atom_to_string(Pointer<ClingoLibrary.clingo_theory_atoms > atoms, int atom, Pointer<Byte > string, @Ptr long size) {
		return clingo_theory_atoms_atom_to_string(Pointer.getPeer(atoms), atom, Pointer.getPeer(string), size);
	}
	@Name("clingo_theory_atoms_atom_to_string") 
	protected native boolean clingo_theory_atoms_atom_to_string(@Ptr long atoms, int atom, @Ptr long string, @Ptr long size);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_model_type(clingo_model_t*, clingo_model_type_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:915</i>
	 */
	@Name("clingo_model_type") 
	public boolean clingo_model_type(Pointer<ClingoLibrary.clingo_model > model, Pointer<Integer > type) {
		return clingo_model_type(Pointer.getPeer(model), Pointer.getPeer(type));
	}
	@Name("clingo_model_type") 
	protected native boolean clingo_model_type(@Ptr long model, @Ptr long type);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_model_number(clingo_model_t*, uint64_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:921</i>
	 */
	@Name("clingo_model_number") 
	public boolean clingo_model_number(Pointer<ClingoLibrary.clingo_model > model, Pointer<Long > number) {
		return clingo_model_number(Pointer.getPeer(model), Pointer.getPeer(number));
	}
	@Name("clingo_model_number") 
	protected native boolean clingo_model_number(@Ptr long model, @Ptr long number);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_model_symbols_size(clingo_model_t*, clingo_show_type_bitset_t, size_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:929</i>
	 */
	@Name("clingo_model_symbols_size") 
	public boolean clingo_model_symbols_size(Pointer<ClingoLibrary.clingo_model > model, int show, Pointer<SizeT > size) {
		return clingo_model_symbols_size(Pointer.getPeer(model), show, Pointer.getPeer(size));
	}
	@Name("clingo_model_symbols_size") 
	protected native boolean clingo_model_symbols_size(@Ptr long model, int show, @Ptr long size);
	/**
	 * ! @see clingo_model_symbols_size()<br>
	 * Original signature : <code>bool clingo_model_symbols(clingo_model_t*, clingo_show_type_bitset_t, clingo_symbol_t*, size_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:945</i>
	 */
	@Name("clingo_model_symbols") 
	public boolean clingo_model_symbols(Pointer<ClingoLibrary.clingo_model > model, int show, Pointer<Long > symbols, @Ptr long size) {
		return clingo_model_symbols(Pointer.getPeer(model), show, Pointer.getPeer(symbols), size);
	}
	@Name("clingo_model_symbols") 
	protected native boolean clingo_model_symbols(@Ptr long model, int show, @Ptr long symbols, @Ptr long size);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_model_contains(clingo_model_t*, clingo_symbol_t, bool*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:952</i>
	 */
	@Name("clingo_model_contains") 
	public boolean clingo_model_contains(Pointer<ClingoLibrary.clingo_model > model, long atom, Pointer<Boolean > contained) {
		return clingo_model_contains(Pointer.getPeer(model), atom, Pointer.getPeer(contained));
	}
	@Name("clingo_model_contains") 
	protected native boolean clingo_model_contains(@Ptr long model, long atom, @Ptr long contained);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_model_is_true(clingo_model_t*, clingo_literal_t, bool*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:959</i>
	 */
	@Name("clingo_model_is_true") 
	public boolean clingo_model_is_true(Pointer<ClingoLibrary.clingo_model > model, int literal, Pointer<Boolean > result) {
		return clingo_model_is_true(Pointer.getPeer(model), literal, Pointer.getPeer(result));
	}
	@Name("clingo_model_is_true") 
	protected native boolean clingo_model_is_true(@Ptr long model, int literal, @Ptr long result);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_model_cost_size(clingo_model_t*, size_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:965</i>
	 */
	@Name("clingo_model_cost_size") 
	public boolean clingo_model_cost_size(Pointer<ClingoLibrary.clingo_model > model, Pointer<SizeT > size) {
		return clingo_model_cost_size(Pointer.getPeer(model), Pointer.getPeer(size));
	}
	@Name("clingo_model_cost_size") 
	protected native boolean clingo_model_cost_size(@Ptr long model, @Ptr long size);
	/**
	 * ! @see clingo_model_optimality_proven()<br>
	 * Original signature : <code>bool clingo_model_cost(clingo_model_t*, int64_t*, size_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:977</i>
	 */
	@Name("clingo_model_cost") 
	public boolean clingo_model_cost(Pointer<ClingoLibrary.clingo_model > model, Pointer<Long > costs, @Ptr long size) {
		return clingo_model_cost(Pointer.getPeer(model), Pointer.getPeer(costs), size);
	}
	@Name("clingo_model_cost") 
	protected native boolean clingo_model_cost(@Ptr long model, @Ptr long costs, @Ptr long size);
	/**
	 * ! @see clingo_model_cost()<br>
	 * Original signature : <code>bool clingo_model_optimality_proven(clingo_model_t*, bool*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:985</i>
	 */
	@Name("clingo_model_optimality_proven") 
	public boolean clingo_model_optimality_proven(Pointer<ClingoLibrary.clingo_model > model, Pointer<Boolean > proven) {
		return clingo_model_optimality_proven(Pointer.getPeer(model), Pointer.getPeer(proven));
	}
	@Name("clingo_model_optimality_proven") 
	protected native boolean clingo_model_optimality_proven(@Ptr long model, @Ptr long proven);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_model_thread_id(clingo_model_t*, clingo_id_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:991</i>
	 */
	@Name("clingo_model_thread_id") 
	public boolean clingo_model_thread_id(Pointer<ClingoLibrary.clingo_model > model, Pointer<Integer > id) {
		return clingo_model_thread_id(Pointer.getPeer(model), Pointer.getPeer(id));
	}
	@Name("clingo_model_thread_id") 
	protected native boolean clingo_model_thread_id(@Ptr long model, @Ptr long id);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_model_context(clingo_model_t*, clingo_solve_control_t**)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1003</i>
	 */
	@Name("clingo_model_context") 
	public boolean clingo_model_context(Pointer<ClingoLibrary.clingo_model > model, Pointer<Pointer<ClingoLibrary.clingo_solve_control > > control) {
		return clingo_model_context(Pointer.getPeer(model), Pointer.getPeer(control));
	}
	@Name("clingo_model_context") 
	protected native boolean clingo_model_context(@Ptr long model, @Ptr long control);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_solve_control_symbolic_atoms(clingo_solve_control_t*, clingo_symbolic_atoms_t**)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1009</i>
	 */
	@Name("clingo_solve_control_symbolic_atoms") 
	public boolean clingo_solve_control_symbolic_atoms(Pointer<ClingoLibrary.clingo_solve_control > control, Pointer<Pointer<ClingoLibrary.clingo_symbolic_atoms > > atoms) {
		return clingo_solve_control_symbolic_atoms(Pointer.getPeer(control), Pointer.getPeer(atoms));
	}
	@Name("clingo_solve_control_symbolic_atoms") 
	protected native boolean clingo_solve_control_symbolic_atoms(@Ptr long control, @Ptr long atoms);
	/**
	 * ! - ::clingo_error_runtime if adding the clause fails<br>
	 * Original signature : <code>bool clingo_solve_control_add_clause(clingo_solve_control_t*, const clingo_literal_t*, size_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1022</i>
	 */
	@Name("clingo_solve_control_add_clause") 
	public boolean clingo_solve_control_add_clause(Pointer<ClingoLibrary.clingo_solve_control > control, Pointer<Integer > clause, @Ptr long size) {
		return clingo_solve_control_add_clause(Pointer.getPeer(control), Pointer.getPeer(clause), size);
	}
	@Name("clingo_solve_control_add_clause") 
	protected native boolean clingo_solve_control_add_clause(@Ptr long control, @Ptr long clause, @Ptr long size);
	/**
	 * ! - ::clingo_error_runtime if solving fails<br>
	 * Original signature : <code>bool clingo_solve_handle_get(clingo_solve_handle_t*, clingo_solve_result_bitset_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1120</i>
	 */
	@Name("clingo_solve_handle_get") 
	public boolean clingo_solve_handle_get(Pointer<ClingoLibrary.clingo_solve_handle > handle, Pointer<Integer > result) {
		return clingo_solve_handle_get(Pointer.getPeer(handle), Pointer.getPeer(result));
	}
	@Name("clingo_solve_handle_get") 
	protected native boolean clingo_solve_handle_get(@Ptr long handle, @Ptr long result);
	/**
	 * ! @param[out] result whether the search has finished<br>
	 * Original signature : <code>void clingo_solve_handle_wait(clingo_solve_handle_t*, double, bool*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1129</i>
	 */
	@Name("clingo_solve_handle_wait") 
	public void clingo_solve_handle_wait(Pointer<ClingoLibrary.clingo_solve_handle > handle, double timeout, Pointer<Boolean > result) {
		clingo_solve_handle_wait(Pointer.getPeer(handle), timeout, Pointer.getPeer(result));
	}
	@Name("clingo_solve_handle_wait") 
	protected native void clingo_solve_handle_wait(@Ptr long handle, double timeout, @Ptr long result);
	/**
	 * ! - ::clingo_error_runtime if solving fails<br>
	 * Original signature : <code>bool clingo_solve_handle_model(clingo_solve_handle_t*, clingo_model_t**)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1137</i>
	 */
	@Name("clingo_solve_handle_model") 
	public boolean clingo_solve_handle_model(Pointer<ClingoLibrary.clingo_solve_handle > handle, Pointer<Pointer<ClingoLibrary.clingo_model > > model) {
		return clingo_solve_handle_model(Pointer.getPeer(handle), Pointer.getPeer(model));
	}
	@Name("clingo_solve_handle_model") 
	protected native boolean clingo_solve_handle_model(@Ptr long handle, @Ptr long model);
	/**
	 * ! - ::clingo_error_runtime if solving fails<br>
	 * Original signature : <code>bool clingo_solve_handle_resume(clingo_solve_handle_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1148</i>
	 */
	@Name("clingo_solve_handle_resume") 
	public boolean clingo_solve_handle_resume(Pointer<ClingoLibrary.clingo_solve_handle > handle) {
		return clingo_solve_handle_resume(Pointer.getPeer(handle));
	}
	@Name("clingo_solve_handle_resume") 
	protected native boolean clingo_solve_handle_resume(@Ptr long handle);
	/**
	 * ! - ::clingo_error_runtime if solving fails<br>
	 * Original signature : <code>bool clingo_solve_handle_cancel(clingo_solve_handle_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1155</i>
	 */
	@Name("clingo_solve_handle_cancel") 
	public boolean clingo_solve_handle_cancel(Pointer<ClingoLibrary.clingo_solve_handle > handle) {
		return clingo_solve_handle_cancel(Pointer.getPeer(handle));
	}
	@Name("clingo_solve_handle_cancel") 
	protected native boolean clingo_solve_handle_cancel(@Ptr long handle);
	/**
	 * ! - ::clingo_error_runtime if solving fails<br>
	 * Original signature : <code>bool clingo_solve_handle_close(clingo_solve_handle_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1164</i>
	 */
	@Name("clingo_solve_handle_close") 
	public boolean clingo_solve_handle_close(Pointer<ClingoLibrary.clingo_solve_handle > handle) {
		return clingo_solve_handle_close(Pointer.getPeer(handle));
	}
	@Name("clingo_solve_handle_close") 
	protected native boolean clingo_solve_handle_close(@Ptr long handle);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_propagate_init_solver_literal(clingo_propagate_init_t*, clingo_literal_t, clingo_literal_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1220</i>
	 */
	@Name("clingo_propagate_init_solver_literal") 
	public boolean clingo_propagate_init_solver_literal(Pointer<ClingoLibrary.clingo_propagate_init > init, int aspif_literal, Pointer<Integer > solver_literal) {
		return clingo_propagate_init_solver_literal(Pointer.getPeer(init), aspif_literal, Pointer.getPeer(solver_literal));
	}
	@Name("clingo_propagate_init_solver_literal") 
	protected native boolean clingo_propagate_init_solver_literal(@Ptr long init, int aspif_literal, @Ptr long solver_literal);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_propagate_init_add_watch(clingo_propagate_init_t*, clingo_literal_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1226</i>
	 */
	@Name("clingo_propagate_init_add_watch") 
	public boolean clingo_propagate_init_add_watch(Pointer<ClingoLibrary.clingo_propagate_init > init, int solver_literal) {
		return clingo_propagate_init_add_watch(Pointer.getPeer(init), solver_literal);
	}
	@Name("clingo_propagate_init_add_watch") 
	protected native boolean clingo_propagate_init_add_watch(@Ptr long init, int solver_literal);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_propagate_init_symbolic_atoms(clingo_propagate_init_t*, clingo_symbolic_atoms_t**)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1232</i>
	 */
	@Name("clingo_propagate_init_symbolic_atoms") 
	public boolean clingo_propagate_init_symbolic_atoms(Pointer<ClingoLibrary.clingo_propagate_init > init, Pointer<Pointer<ClingoLibrary.clingo_symbolic_atoms > > atoms) {
		return clingo_propagate_init_symbolic_atoms(Pointer.getPeer(init), Pointer.getPeer(atoms));
	}
	@Name("clingo_propagate_init_symbolic_atoms") 
	protected native boolean clingo_propagate_init_symbolic_atoms(@Ptr long init, @Ptr long atoms);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_propagate_init_theory_atoms(clingo_propagate_init_t*, clingo_theory_atoms_t**)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1238</i>
	 */
	@Name("clingo_propagate_init_theory_atoms") 
	public boolean clingo_propagate_init_theory_atoms(Pointer<ClingoLibrary.clingo_propagate_init > init, Pointer<Pointer<ClingoLibrary.clingo_theory_atoms > > atoms) {
		return clingo_propagate_init_theory_atoms(Pointer.getPeer(init), Pointer.getPeer(atoms));
	}
	@Name("clingo_propagate_init_theory_atoms") 
	protected native boolean clingo_propagate_init_theory_atoms(@Ptr long init, @Ptr long atoms);
	/**
	 * ! @see clingo_propagate_control_thread_id()<br>
	 * Original signature : <code>int clingo_propagate_init_number_of_threads(clingo_propagate_init_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1244</i>
	 */
	@Name("clingo_propagate_init_number_of_threads") 
	public int clingo_propagate_init_number_of_threads(Pointer<ClingoLibrary.clingo_propagate_init > init) {
		return clingo_propagate_init_number_of_threads(Pointer.getPeer(init));
	}
	@Name("clingo_propagate_init_number_of_threads") 
	protected native int clingo_propagate_init_number_of_threads(@Ptr long init);
	/**
	 * ! @see @ref ::clingo_propagator::check()<br>
	 * Original signature : <code>void clingo_propagate_init_set_check_mode(clingo_propagate_init_t*, clingo_propagator_check_mode_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1250</i>
	 */
	@Name("clingo_propagate_init_set_check_mode") 
	public void clingo_propagate_init_set_check_mode(Pointer<ClingoLibrary.clingo_propagate_init > init, int mode) {
		clingo_propagate_init_set_check_mode(Pointer.getPeer(init), mode);
	}
	@Name("clingo_propagate_init_set_check_mode") 
	protected native void clingo_propagate_init_set_check_mode(@Ptr long init, int mode);
	/**
	 * ! @see clingo_propagate_init_set_check_mode()<br>
	 * Original signature : <code>clingo_propagator_check_mode_t clingo_propagate_init_get_check_mode(clingo_propagate_init_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1256</i>
	 */
	@Name("clingo_propagate_init_get_check_mode") 
	public int clingo_propagate_init_get_check_mode(Pointer<ClingoLibrary.clingo_propagate_init > init) {
		return clingo_propagate_init_get_check_mode(Pointer.getPeer(init));
	}
	@Name("clingo_propagate_init_get_check_mode") 
	protected native int clingo_propagate_init_get_check_mode(@Ptr long init);
	/**
	 * ! @return the decision level<br>
	 * Original signature : <code>uint32_t clingo_assignment_decision_level(clingo_assignment_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1278</i>
	 */
	@Name("clingo_assignment_decision_level") 
	public int clingo_assignment_decision_level(Pointer<ClingoLibrary.clingo_assignment > assignment) {
		return clingo_assignment_decision_level(Pointer.getPeer(assignment));
	}
	@Name("clingo_assignment_decision_level") 
	protected native int clingo_assignment_decision_level(@Ptr long assignment);
	/**
	 * ! @return whether the assignment is conflicting<br>
	 * Original signature : <code>bool clingo_assignment_has_conflict(clingo_assignment_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1283</i>
	 */
	@Name("clingo_assignment_has_conflict") 
	public boolean clingo_assignment_has_conflict(Pointer<ClingoLibrary.clingo_assignment > assignment) {
		return clingo_assignment_has_conflict(Pointer.getPeer(assignment));
	}
	@Name("clingo_assignment_has_conflict") 
	protected native boolean clingo_assignment_has_conflict(@Ptr long assignment);
	/**
	 * ! @return whether the literal is valid<br>
	 * Original signature : <code>bool clingo_assignment_has_literal(clingo_assignment_t*, clingo_literal_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1289</i>
	 */
	@Name("clingo_assignment_has_literal") 
	public boolean clingo_assignment_has_literal(Pointer<ClingoLibrary.clingo_assignment > assignment, int literal) {
		return clingo_assignment_has_literal(Pointer.getPeer(assignment), literal);
	}
	@Name("clingo_assignment_has_literal") 
	protected native boolean clingo_assignment_has_literal(@Ptr long assignment, int literal);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_assignment_level(clingo_assignment_t*, clingo_literal_t, uint32_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1296</i>
	 */
	@Name("clingo_assignment_level") 
	public boolean clingo_assignment_level(Pointer<ClingoLibrary.clingo_assignment > assignment, int literal, Pointer<Integer > level) {
		return clingo_assignment_level(Pointer.getPeer(assignment), literal, Pointer.getPeer(level));
	}
	@Name("clingo_assignment_level") 
	protected native boolean clingo_assignment_level(@Ptr long assignment, int literal, @Ptr long level);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_assignment_decision(clingo_assignment_t*, uint32_t, clingo_literal_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1303</i>
	 */
	@Name("clingo_assignment_decision") 
	public boolean clingo_assignment_decision(Pointer<ClingoLibrary.clingo_assignment > assignment, int level, Pointer<Integer > literal) {
		return clingo_assignment_decision(Pointer.getPeer(assignment), level, Pointer.getPeer(literal));
	}
	@Name("clingo_assignment_decision") 
	protected native boolean clingo_assignment_decision(@Ptr long assignment, int level, @Ptr long literal);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_assignment_is_fixed(clingo_assignment_t*, clingo_literal_t, bool*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1310</i>
	 */
	@Name("clingo_assignment_is_fixed") 
	public boolean clingo_assignment_is_fixed(Pointer<ClingoLibrary.clingo_assignment > assignment, int literal, Pointer<Boolean > is_fixed) {
		return clingo_assignment_is_fixed(Pointer.getPeer(assignment), literal, Pointer.getPeer(is_fixed));
	}
	@Name("clingo_assignment_is_fixed") 
	protected native boolean clingo_assignment_is_fixed(@Ptr long assignment, int literal, @Ptr long is_fixed);
	/**
	 * ! @see clingo_assignment_truth_value()<br>
	 * Original signature : <code>bool clingo_assignment_is_true(clingo_assignment_t*, clingo_literal_t, bool*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1318</i>
	 */
	@Name("clingo_assignment_is_true") 
	public boolean clingo_assignment_is_true(Pointer<ClingoLibrary.clingo_assignment > assignment, int literal, Pointer<Boolean > is_true) {
		return clingo_assignment_is_true(Pointer.getPeer(assignment), literal, Pointer.getPeer(is_true));
	}
	@Name("clingo_assignment_is_true") 
	protected native boolean clingo_assignment_is_true(@Ptr long assignment, int literal, @Ptr long is_true);
	/**
	 * ! @see clingo_assignment_truth_value()<br>
	 * Original signature : <code>bool clingo_assignment_is_false(clingo_assignment_t*, clingo_literal_t, bool*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1326</i>
	 */
	@Name("clingo_assignment_is_false") 
	public boolean clingo_assignment_is_false(Pointer<ClingoLibrary.clingo_assignment > assignment, int literal, Pointer<Boolean > is_false) {
		return clingo_assignment_is_false(Pointer.getPeer(assignment), literal, Pointer.getPeer(is_false));
	}
	@Name("clingo_assignment_is_false") 
	protected native boolean clingo_assignment_is_false(@Ptr long assignment, int literal, @Ptr long is_false);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_assignment_truth_value(clingo_assignment_t*, clingo_literal_t, clingo_truth_value_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1333</i>
	 */
	@Name("clingo_assignment_truth_value") 
	public boolean clingo_assignment_truth_value(Pointer<ClingoLibrary.clingo_assignment > assignment, int literal, Pointer<Integer > value) {
		return clingo_assignment_truth_value(Pointer.getPeer(assignment), literal, Pointer.getPeer(value));
	}
	@Name("clingo_assignment_truth_value") 
	protected native boolean clingo_assignment_truth_value(@Ptr long assignment, int literal, @Ptr long value);
	/**
	 * ! @return the number of literals<br>
	 * Original signature : <code>size_t clingo_assignment_size(clingo_assignment_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1338</i>
	 */
	@Name("clingo_assignment_size") 
	@Ptr 
	public long clingo_assignment_size(Pointer<ClingoLibrary.clingo_assignment > assignment) {
		return clingo_assignment_size(Pointer.getPeer(assignment));
	}
	@Name("clingo_assignment_size") 
	@Ptr 
	protected native long clingo_assignment_size(@Ptr long assignment);
	/**
	 * ! @return the maximum size<br>
	 * Original signature : <code>size_t clingo_assignment_max_size(clingo_assignment_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1343</i>
	 */
	@Name("clingo_assignment_max_size") 
	@Ptr 
	public long clingo_assignment_max_size(Pointer<ClingoLibrary.clingo_assignment > assignment) {
		return clingo_assignment_max_size(Pointer.getPeer(assignment));
	}
	@Name("clingo_assignment_max_size") 
	@Ptr 
	protected native long clingo_assignment_max_size(@Ptr long assignment);
	/**
	 * ! @return wheather the assignment is total<br>
	 * Original signature : <code>bool clingo_assignment_is_total(clingo_assignment_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1348</i>
	 */
	@Name("clingo_assignment_is_total") 
	public boolean clingo_assignment_is_total(Pointer<ClingoLibrary.clingo_assignment > assignment) {
		return clingo_assignment_is_total(Pointer.getPeer(assignment));
	}
	@Name("clingo_assignment_is_total") 
	protected native boolean clingo_assignment_is_total(@Ptr long assignment);
	/**
	 * ! @return the thread id<br>
	 * Original signature : <code>clingo_id_t clingo_propagate_control_thread_id(clingo_propagate_control_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1377</i>
	 */
	@Name("clingo_propagate_control_thread_id") 
	public int clingo_propagate_control_thread_id(Pointer<ClingoLibrary.clingo_propagate_control > control) {
		return clingo_propagate_control_thread_id(Pointer.getPeer(control));
	}
	@Name("clingo_propagate_control_thread_id") 
	protected native int clingo_propagate_control_thread_id(@Ptr long control);
	/**
	 * ! @return the assignment<br>
	 * Original signature : <code>clingo_assignment_t* clingo_propagate_control_assignment(clingo_propagate_control_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1382</i>
	 */
	@Name("clingo_propagate_control_assignment") 
	public Pointer<ClingoLibrary.clingo_assignment > clingo_propagate_control_assignment(Pointer<ClingoLibrary.clingo_propagate_control > control) {
		return (Pointer)Pointer.pointerToAddress(clingo_propagate_control_assignment(Pointer.getPeer(control)), ClingoLibrary.clingo_assignment.class);
	}
	@Name("clingo_propagate_control_assignment") 
	@Ptr 
	protected native long clingo_propagate_control_assignment(@Ptr long control);
	/**
	 * ! - ::clingo_error_logic if the assignment is conflicting<br>
	 * Original signature : <code>bool clingo_propagate_control_add_literal(clingo_propagate_control_t*, clingo_literal_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1393</i>
	 */
	@Name("clingo_propagate_control_add_literal") 
	public boolean clingo_propagate_control_add_literal(Pointer<ClingoLibrary.clingo_propagate_control > control, Pointer<Integer > result) {
		return clingo_propagate_control_add_literal(Pointer.getPeer(control), Pointer.getPeer(result));
	}
	@Name("clingo_propagate_control_add_literal") 
	protected native boolean clingo_propagate_control_add_literal(@Ptr long control, @Ptr long result);
	/**
	 * ! @see clingo_propagate_control_remove_watch()<br>
	 * Original signature : <code>bool clingo_propagate_control_add_watch(clingo_propagate_control_t*, clingo_literal_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1404</i>
	 */
	@Name("clingo_propagate_control_add_watch") 
	public boolean clingo_propagate_control_add_watch(Pointer<ClingoLibrary.clingo_propagate_control > control, int literal) {
		return clingo_propagate_control_add_watch(Pointer.getPeer(control), literal);
	}
	@Name("clingo_propagate_control_add_watch") 
	protected native boolean clingo_propagate_control_add_watch(@Ptr long control, int literal);
	/**
	 * ! @return whether the literal is watched<br>
	 * Original signature : <code>bool clingo_propagate_control_has_watch(clingo_propagate_control_t*, clingo_literal_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1411</i>
	 */
	@Name("clingo_propagate_control_has_watch") 
	public boolean clingo_propagate_control_has_watch(Pointer<ClingoLibrary.clingo_propagate_control > control, int literal) {
		return clingo_propagate_control_has_watch(Pointer.getPeer(control), literal);
	}
	@Name("clingo_propagate_control_has_watch") 
	protected native boolean clingo_propagate_control_has_watch(@Ptr long control, int literal);
	/**
	 * ! @param[in] literal the literal to remove<br>
	 * Original signature : <code>void clingo_propagate_control_remove_watch(clingo_propagate_control_t*, clingo_literal_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1418</i>
	 */
	@Name("clingo_propagate_control_remove_watch") 
	public void clingo_propagate_control_remove_watch(Pointer<ClingoLibrary.clingo_propagate_control > control, int literal) {
		clingo_propagate_control_remove_watch(Pointer.getPeer(control), literal);
	}
	@Name("clingo_propagate_control_remove_watch") 
	protected native void clingo_propagate_control_remove_watch(@Ptr long control, int literal);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_propagate_control_add_clause(clingo_propagate_control_t*, const clingo_literal_t*, size_t, clingo_clause_type_t, bool*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1432</i>
	 */
	@Name("clingo_propagate_control_add_clause") 
	public boolean clingo_propagate_control_add_clause(Pointer<ClingoLibrary.clingo_propagate_control > control, Pointer<Integer > clause, @Ptr long size, int type, Pointer<Boolean > result) {
		return clingo_propagate_control_add_clause(Pointer.getPeer(control), Pointer.getPeer(clause), size, type, Pointer.getPeer(result));
	}
	@Name("clingo_propagate_control_add_clause") 
	protected native boolean clingo_propagate_control_add_clause(@Ptr long control, @Ptr long clause, @Ptr long size, int type, @Ptr long result);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_propagate_control_propagate(clingo_propagate_control_t*, bool*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1443</i>
	 */
	@Name("clingo_propagate_control_propagate") 
	public boolean clingo_propagate_control_propagate(Pointer<ClingoLibrary.clingo_propagate_control > control, Pointer<Boolean > result) {
		return clingo_propagate_control_propagate(Pointer.getPeer(control), Pointer.getPeer(result));
	}
	@Name("clingo_propagate_control_propagate") 
	protected native boolean clingo_propagate_control_propagate(@Ptr long control, @Ptr long result);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_backend_rule(clingo_backend_t*, bool, const clingo_atom_t*, size_t, const clingo_literal_t*, size_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1616</i>
	 */
	@Name("clingo_backend_rule") 
	public boolean clingo_backend_rule(Pointer<ClingoLibrary.clingo_backend > backend, boolean choice, Pointer<Integer > head, @Ptr long head_size, Pointer<Integer > body, @Ptr long body_size) {
		return clingo_backend_rule(Pointer.getPeer(backend), choice, Pointer.getPeer(head), head_size, Pointer.getPeer(body), body_size);
	}
	@Name("clingo_backend_rule") 
	protected native boolean clingo_backend_rule(@Ptr long backend, boolean choice, @Ptr long head, @Ptr long head_size, @Ptr long body, @Ptr long body_size);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_backend_weight_rule(clingo_backend_t*, bool, const clingo_atom_t*, size_t, clingo_weight_t, const clingo_weighted_literal_t*, size_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1629</i>
	 */
	@Name("clingo_backend_weight_rule") 
	public boolean clingo_backend_weight_rule(Pointer<ClingoLibrary.clingo_backend > backend, boolean choice, Pointer<Integer > head, @Ptr long head_size, int lower_bound, Pointer<clingo_weighted_literal > body, @Ptr long body_size) {
		return clingo_backend_weight_rule(Pointer.getPeer(backend), choice, Pointer.getPeer(head), head_size, lower_bound, Pointer.getPeer(body), body_size);
	}
	@Name("clingo_backend_weight_rule") 
	protected native boolean clingo_backend_weight_rule(@Ptr long backend, boolean choice, @Ptr long head, @Ptr long head_size, int lower_bound, @Ptr long body, @Ptr long body_size);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_backend_minimize(clingo_backend_t*, clingo_weight_t, const clingo_weighted_literal_t*, size_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1638</i>
	 */
	@Name("clingo_backend_minimize") 
	public boolean clingo_backend_minimize(Pointer<ClingoLibrary.clingo_backend > backend, int priority, Pointer<clingo_weighted_literal > literals, @Ptr long size) {
		return clingo_backend_minimize(Pointer.getPeer(backend), priority, Pointer.getPeer(literals), size);
	}
	@Name("clingo_backend_minimize") 
	protected native boolean clingo_backend_minimize(@Ptr long backend, int priority, @Ptr long literals, @Ptr long size);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_backend_project(clingo_backend_t*, const clingo_atom_t*, size_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1646</i>
	 */
	@Name("clingo_backend_project") 
	public boolean clingo_backend_project(Pointer<ClingoLibrary.clingo_backend > backend, Pointer<Integer > atoms, @Ptr long size) {
		return clingo_backend_project(Pointer.getPeer(backend), Pointer.getPeer(atoms), size);
	}
	@Name("clingo_backend_project") 
	protected native boolean clingo_backend_project(@Ptr long backend, @Ptr long atoms, @Ptr long size);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_backend_external(clingo_backend_t*, clingo_atom_t, clingo_external_type_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1654</i>
	 */
	@Name("clingo_backend_external") 
	public boolean clingo_backend_external(Pointer<ClingoLibrary.clingo_backend > backend, int atom, int type) {
		return clingo_backend_external(Pointer.getPeer(backend), atom, type);
	}
	@Name("clingo_backend_external") 
	protected native boolean clingo_backend_external(@Ptr long backend, int atom, int type);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_backend_assume(clingo_backend_t*, const clingo_literal_t*, size_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1662</i>
	 */
	@Name("clingo_backend_assume") 
	public boolean clingo_backend_assume(Pointer<ClingoLibrary.clingo_backend > backend, Pointer<Integer > literals, @Ptr long size) {
		return clingo_backend_assume(Pointer.getPeer(backend), Pointer.getPeer(literals), size);
	}
	@Name("clingo_backend_assume") 
	protected native boolean clingo_backend_assume(@Ptr long backend, @Ptr long literals, @Ptr long size);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_backend_heuristic(clingo_backend_t*, clingo_atom_t, clingo_heuristic_type_t, int, unsigned, const clingo_literal_t*, size_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1674</i>
	 */
	@Name("clingo_backend_heuristic") 
	public boolean clingo_backend_heuristic(Pointer<ClingoLibrary.clingo_backend > backend, int atom, int type, int bias, int priority, Pointer<Integer > condition, @Ptr long size) {
		return clingo_backend_heuristic(Pointer.getPeer(backend), atom, type, bias, priority, Pointer.getPeer(condition), size);
	}
	@Name("clingo_backend_heuristic") 
	protected native boolean clingo_backend_heuristic(@Ptr long backend, int atom, int type, int bias, int priority, @Ptr long condition, @Ptr long size);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_backend_acyc_edge(clingo_backend_t*, int, int, const clingo_literal_t*, size_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1684</i>
	 */
	@Name("clingo_backend_acyc_edge") 
	public boolean clingo_backend_acyc_edge(Pointer<ClingoLibrary.clingo_backend > backend, int node_u, int node_v, Pointer<Integer > condition, @Ptr long size) {
		return clingo_backend_acyc_edge(Pointer.getPeer(backend), node_u, node_v, Pointer.getPeer(condition), size);
	}
	@Name("clingo_backend_acyc_edge") 
	protected native boolean clingo_backend_acyc_edge(@Ptr long backend, int node_u, int node_v, @Ptr long condition, @Ptr long size);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_backend_add_atom(clingo_backend_t*, clingo_atom_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1690</i>
	 */
	@Name("clingo_backend_add_atom") 
	public boolean clingo_backend_add_atom(Pointer<ClingoLibrary.clingo_backend > backend, Pointer<Integer > atom) {
		return clingo_backend_add_atom(Pointer.getPeer(backend), Pointer.getPeer(atom));
	}
	@Name("clingo_backend_add_atom") 
	protected native boolean clingo_backend_add_atom(@Ptr long backend, @Ptr long atom);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_configuration_root(clingo_configuration_t*, clingo_id_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1743</i>
	 */
	@Name("clingo_configuration_root") 
	public boolean clingo_configuration_root(Pointer<ClingoLibrary.clingo_configuration > configuration, Pointer<Integer > key) {
		return clingo_configuration_root(Pointer.getPeer(configuration), Pointer.getPeer(key));
	}
	@Name("clingo_configuration_root") 
	protected native boolean clingo_configuration_root(@Ptr long configuration, @Ptr long key);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_configuration_type(clingo_configuration_t*, clingo_id_t, clingo_configuration_type_bitset_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1752</i>
	 */
	@Name("clingo_configuration_type") 
	public boolean clingo_configuration_type(Pointer<ClingoLibrary.clingo_configuration > configuration, int key, Pointer<Integer > type) {
		return clingo_configuration_type(Pointer.getPeer(configuration), key, Pointer.getPeer(type));
	}
	@Name("clingo_configuration_type") 
	protected native boolean clingo_configuration_type(@Ptr long configuration, int key, @Ptr long type);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_configuration_description(clingo_configuration_t*, clingo_id_t, const char**)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1759</i>
	 */
	@Name("clingo_configuration_description") 
	public boolean clingo_configuration_description(Pointer<ClingoLibrary.clingo_configuration > configuration, int key, Pointer<Pointer<Byte > > description) {
		return clingo_configuration_description(Pointer.getPeer(configuration), key, Pointer.getPeer(description));
	}
	@Name("clingo_configuration_description") 
	protected native boolean clingo_configuration_description(@Ptr long configuration, int key, @Ptr long description);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_configuration_array_size(clingo_configuration_t*, clingo_id_t, size_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1771</i>
	 */
	@Name("clingo_configuration_array_size") 
	public boolean clingo_configuration_array_size(Pointer<ClingoLibrary.clingo_configuration > configuration, int key, Pointer<SizeT > size) {
		return clingo_configuration_array_size(Pointer.getPeer(configuration), key, Pointer.getPeer(size));
	}
	@Name("clingo_configuration_array_size") 
	protected native boolean clingo_configuration_array_size(@Ptr long configuration, int key, @Ptr long size);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_configuration_array_at(clingo_configuration_t*, clingo_id_t, size_t, clingo_id_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1781</i>
	 */
	@Name("clingo_configuration_array_at") 
	public boolean clingo_configuration_array_at(Pointer<ClingoLibrary.clingo_configuration > configuration, int key, @Ptr long offset, Pointer<Integer > subkey) {
		return clingo_configuration_array_at(Pointer.getPeer(configuration), key, offset, Pointer.getPeer(subkey));
	}
	@Name("clingo_configuration_array_at") 
	protected native boolean clingo_configuration_array_at(@Ptr long configuration, int key, @Ptr long offset, @Ptr long subkey);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_configuration_map_size(clingo_configuration_t*, clingo_id_t, size_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1794</i>
	 */
	@Name("clingo_configuration_map_size") 
	public boolean clingo_configuration_map_size(Pointer<ClingoLibrary.clingo_configuration > configuration, int key, Pointer<SizeT > size) {
		return clingo_configuration_map_size(Pointer.getPeer(configuration), key, Pointer.getPeer(size));
	}
	@Name("clingo_configuration_map_size") 
	protected native boolean clingo_configuration_map_size(@Ptr long configuration, int key, @Ptr long size);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_configuration_map_has_subkey(clingo_configuration_t*, clingo_id_t, const char*, bool*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1804</i>
	 */
	@Name("clingo_configuration_map_has_subkey") 
	public boolean clingo_configuration_map_has_subkey(Pointer<ClingoLibrary.clingo_configuration > configuration, int key, Pointer<Byte > name, Pointer<Boolean > result) {
		return clingo_configuration_map_has_subkey(Pointer.getPeer(configuration), key, Pointer.getPeer(name), Pointer.getPeer(result));
	}
	@Name("clingo_configuration_map_has_subkey") 
	protected native boolean clingo_configuration_map_has_subkey(@Ptr long configuration, int key, @Ptr long name, @Ptr long result);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_configuration_map_subkey_name(clingo_configuration_t*, clingo_id_t, size_t, const char**)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1813</i>
	 */
	@Name("clingo_configuration_map_subkey_name") 
	public boolean clingo_configuration_map_subkey_name(Pointer<ClingoLibrary.clingo_configuration > configuration, int key, @Ptr long offset, Pointer<Pointer<Byte > > name) {
		return clingo_configuration_map_subkey_name(Pointer.getPeer(configuration), key, offset, Pointer.getPeer(name));
	}
	@Name("clingo_configuration_map_subkey_name") 
	protected native boolean clingo_configuration_map_subkey_name(@Ptr long configuration, int key, @Ptr long offset, @Ptr long name);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_configuration_map_at(clingo_configuration_t*, clingo_id_t, const char*, clingo_id_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1823</i>
	 */
	@Name("clingo_configuration_map_at") 
	public boolean clingo_configuration_map_at(Pointer<ClingoLibrary.clingo_configuration > configuration, int key, Pointer<Byte > name, Pointer<Integer > subkey) {
		return clingo_configuration_map_at(Pointer.getPeer(configuration), key, Pointer.getPeer(name), Pointer.getPeer(subkey));
	}
	@Name("clingo_configuration_map_at") 
	protected native boolean clingo_configuration_map_at(@Ptr long configuration, int key, @Ptr long name, @Ptr long subkey);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_configuration_value_is_assigned(clingo_configuration_t*, clingo_id_t, bool*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1836</i>
	 */
	@Name("clingo_configuration_value_is_assigned") 
	public boolean clingo_configuration_value_is_assigned(Pointer<ClingoLibrary.clingo_configuration > configuration, int key, Pointer<Boolean > assigned) {
		return clingo_configuration_value_is_assigned(Pointer.getPeer(configuration), key, Pointer.getPeer(assigned));
	}
	@Name("clingo_configuration_value_is_assigned") 
	protected native boolean clingo_configuration_value_is_assigned(@Ptr long configuration, int key, @Ptr long assigned);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_configuration_value_get_size(clingo_configuration_t*, clingo_id_t, size_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1844</i>
	 */
	@Name("clingo_configuration_value_get_size") 
	public boolean clingo_configuration_value_get_size(Pointer<ClingoLibrary.clingo_configuration > configuration, int key, Pointer<SizeT > size) {
		return clingo_configuration_value_get_size(Pointer.getPeer(configuration), key, Pointer.getPeer(size));
	}
	@Name("clingo_configuration_value_get_size") 
	protected native boolean clingo_configuration_value_get_size(@Ptr long configuration, int key, @Ptr long size);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_configuration_value_get(clingo_configuration_t*, clingo_id_t, char*, size_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1854</i>
	 */
	@Name("clingo_configuration_value_get") 
	public boolean clingo_configuration_value_get(Pointer<ClingoLibrary.clingo_configuration > configuration, int key, Pointer<Byte > value, @Ptr long size) {
		return clingo_configuration_value_get(Pointer.getPeer(configuration), key, Pointer.getPeer(value), size);
	}
	@Name("clingo_configuration_value_get") 
	protected native boolean clingo_configuration_value_get(@Ptr long configuration, int key, @Ptr long value, @Ptr long size);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_configuration_value_set(clingo_configuration_t*, clingo_id_t, const char*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1862</i>
	 */
	@Name("clingo_configuration_value_set") 
	public boolean clingo_configuration_value_set(Pointer<ClingoLibrary.clingo_configuration > configuration, int key, Pointer<Byte > value) {
		return clingo_configuration_value_set(Pointer.getPeer(configuration), key, Pointer.getPeer(value));
	}
	@Name("clingo_configuration_value_set") 
	protected native boolean clingo_configuration_value_set(@Ptr long configuration, int key, @Ptr long value);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_statistics_root(clingo_statistics_t*, uint64_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1927</i>
	 */
	@Name("clingo_statistics_root") 
	public boolean clingo_statistics_root(Pointer<ClingoLibrary.clingo_statistic > statistics, Pointer<Long > key) {
		return clingo_statistics_root(Pointer.getPeer(statistics), Pointer.getPeer(key));
	}
	@Name("clingo_statistics_root") 
	protected native boolean clingo_statistics_root(@Ptr long statistics, @Ptr long key);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_statistics_type(clingo_statistics_t*, uint64_t, clingo_statistics_type_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1934</i>
	 */
	@Name("clingo_statistics_type") 
	public boolean clingo_statistics_type(Pointer<ClingoLibrary.clingo_statistic > statistics, long key, Pointer<Integer > type) {
		return clingo_statistics_type(Pointer.getPeer(statistics), key, Pointer.getPeer(type));
	}
	@Name("clingo_statistics_type") 
	protected native boolean clingo_statistics_type(@Ptr long statistics, long key, @Ptr long type);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_statistics_array_size(clingo_statistics_t*, uint64_t, size_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1946</i>
	 */
	@Name("clingo_statistics_array_size") 
	public boolean clingo_statistics_array_size(Pointer<ClingoLibrary.clingo_statistic > statistics, long key, Pointer<SizeT > size) {
		return clingo_statistics_array_size(Pointer.getPeer(statistics), key, Pointer.getPeer(size));
	}
	@Name("clingo_statistics_array_size") 
	protected native boolean clingo_statistics_array_size(@Ptr long statistics, long key, @Ptr long size);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_statistics_array_at(clingo_statistics_t*, uint64_t, size_t, uint64_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1955</i>
	 */
	@Name("clingo_statistics_array_at") 
	public boolean clingo_statistics_array_at(Pointer<ClingoLibrary.clingo_statistic > statistics, long key, @Ptr long offset, Pointer<Long > subkey) {
		return clingo_statistics_array_at(Pointer.getPeer(statistics), key, offset, Pointer.getPeer(subkey));
	}
	@Name("clingo_statistics_array_at") 
	protected native boolean clingo_statistics_array_at(@Ptr long statistics, long key, @Ptr long offset, @Ptr long subkey);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_statistics_map_size(clingo_statistics_t*, uint64_t, size_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1968</i>
	 */
	@Name("clingo_statistics_map_size") 
	public boolean clingo_statistics_map_size(Pointer<ClingoLibrary.clingo_statistic > statistics, long key, Pointer<SizeT > size) {
		return clingo_statistics_map_size(Pointer.getPeer(statistics), key, Pointer.getPeer(size));
	}
	@Name("clingo_statistics_map_size") 
	protected native boolean clingo_statistics_map_size(@Ptr long statistics, long key, @Ptr long size);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_statistics_map_subkey_name(clingo_statistics_t*, uint64_t, size_t, const char**)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1977</i>
	 */
	@Name("clingo_statistics_map_subkey_name") 
	public boolean clingo_statistics_map_subkey_name(Pointer<ClingoLibrary.clingo_statistic > statistics, long key, @Ptr long offset, Pointer<Pointer<Byte > > name) {
		return clingo_statistics_map_subkey_name(Pointer.getPeer(statistics), key, offset, Pointer.getPeer(name));
	}
	@Name("clingo_statistics_map_subkey_name") 
	protected native boolean clingo_statistics_map_subkey_name(@Ptr long statistics, long key, @Ptr long offset, @Ptr long name);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_statistics_map_at(clingo_statistics_t*, uint64_t, const char*, uint64_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:1987</i>
	 */
	@Name("clingo_statistics_map_at") 
	public boolean clingo_statistics_map_at(Pointer<ClingoLibrary.clingo_statistic > statistics, long key, Pointer<Byte > name, Pointer<Long > subkey) {
		return clingo_statistics_map_at(Pointer.getPeer(statistics), key, Pointer.getPeer(name), Pointer.getPeer(subkey));
	}
	@Name("clingo_statistics_map_at") 
	protected native boolean clingo_statistics_map_at(@Ptr long statistics, long key, @Ptr long name, @Ptr long subkey);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_statistics_value_get(clingo_statistics_t*, uint64_t, double*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:2000</i>
	 */
	@Name("clingo_statistics_value_get") 
	public boolean clingo_statistics_value_get(Pointer<ClingoLibrary.clingo_statistic > statistics, long key, Pointer<Double > value) {
		return clingo_statistics_value_get(Pointer.getPeer(statistics), key, Pointer.getPeer(value));
	}
	@Name("clingo_statistics_value_get") 
	protected native boolean clingo_statistics_value_get(@Ptr long statistics, long key, @Ptr long value);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_parse_program(const char*, clingo_ast_callback_t, void*, clingo_logger_t, void*, unsigned)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:2624</i>
	 */
	@Name("clingo_parse_program") 
	public boolean clingo_parse_program(Pointer<Byte > program, Pointer<ClingoLibrary.clingo_ast_callback_t > callback, Pointer<? > callback_data, Pointer<ClingoLibrary.clingo_logger_t > logger, Pointer<? > logger_data, int message_limit) {
		return clingo_parse_program(Pointer.getPeer(program), Pointer.getPeer(callback), Pointer.getPeer(callback_data), Pointer.getPeer(logger), Pointer.getPeer(logger_data), message_limit);
	}
	@Name("clingo_parse_program") 
	protected native boolean clingo_parse_program(@Ptr long program, @Ptr long callback, @Ptr long callback_data, @Ptr long logger, @Ptr long logger_data, int message_limit);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_program_builder_begin(clingo_program_builder_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:2640</i>
	 */
	@Name("clingo_program_builder_begin") 
	public boolean clingo_program_builder_begin(Pointer<ClingoLibrary.clingo_program_builder > builder) {
		return clingo_program_builder_begin(Pointer.getPeer(builder));
	}
	@Name("clingo_program_builder_begin") 
	protected native boolean clingo_program_builder_begin(@Ptr long builder);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_program_builder_add(clingo_program_builder_t*, const clingo_ast_statement_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:2649</i>
	 */
	@Name("clingo_program_builder_add") 
	public boolean clingo_program_builder_add(Pointer<ClingoLibrary.clingo_program_builder > builder, Pointer<clingo_ast_statement > statement) {
		return clingo_program_builder_add(Pointer.getPeer(builder), Pointer.getPeer(statement));
	}
	@Name("clingo_program_builder_add") 
	protected native boolean clingo_program_builder_add(@Ptr long builder, @Ptr long statement);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_program_builder_end(clingo_program_builder_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:2654</i>
	 */
	@Name("clingo_program_builder_end") 
	public boolean clingo_program_builder_end(Pointer<ClingoLibrary.clingo_program_builder > builder) {
		return clingo_program_builder_end(Pointer.getPeer(builder));
	}
	@Name("clingo_program_builder_end") 
	protected native boolean clingo_program_builder_end(@Ptr long builder);
	/**
	 * ! - ::clingo_error_runtime if argument parsing fails<br>
	 * Original signature : <code>bool clingo_control_new(const const char**, size_t, clingo_logger_t, void*, unsigned, clingo_control_t**)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:3000</i>
	 */
	@Name("clingo_control_new") 
	public boolean clingo_control_new(Pointer<Pointer<Byte > > arguments, @Ptr long arguments_size, Pointer<ClingoLibrary.clingo_logger_t > logger, Pointer<? > logger_data, int message_limit, Pointer<Pointer<ClingoLibrary.clingo_control > > control) {
		return clingo_control_new(Pointer.getPeer(arguments), arguments_size, Pointer.getPeer(logger), Pointer.getPeer(logger_data), message_limit, Pointer.getPeer(control));
	}
	@Name("clingo_control_new") 
	protected native boolean clingo_control_new(@Ptr long arguments, @Ptr long arguments_size, @Ptr long logger, @Ptr long logger_data, int message_limit, @Ptr long control);
	/**
	 * ! @param[in] control the target<br>
	 * Original signature : <code>void clingo_control_free(clingo_control_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:3004</i>
	 */
	@Name("clingo_control_free") 
	public void clingo_control_free(Pointer<ClingoLibrary.clingo_control > control) {
		clingo_control_free(Pointer.getPeer(control));
	}
	@Name("clingo_control_free") 
	protected native void clingo_control_free(@Ptr long control);
	/**
	 * ! - ::clingo_error_runtime if parsing or checking fails<br>
	 * Original signature : <code>bool clingo_control_load(clingo_control_t*, const char*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:3016</i>
	 */
	@Name("clingo_control_load") 
	public boolean clingo_control_load(Pointer<ClingoLibrary.clingo_control > control, Pointer<Byte > file) {
		return clingo_control_load(Pointer.getPeer(control), Pointer.getPeer(file));
	}
	@Name("clingo_control_load") 
	protected native boolean clingo_control_load(@Ptr long control, @Ptr long file);
	/**
	 * ! - ::clingo_error_runtime if parsing fails<br>
	 * Original signature : <code>bool clingo_control_add(clingo_control_t*, const char*, const const char**, size_t, const char*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:3032</i>
	 */
	@Name("clingo_control_add") 
	public boolean clingo_control_add(Pointer<ClingoLibrary.clingo_control > control, Pointer<Byte > name, Pointer<Pointer<Byte > > parameters, @Ptr long parameters_size, Pointer<Byte > program) {
		return clingo_control_add(Pointer.getPeer(control), Pointer.getPeer(name), Pointer.getPeer(parameters), parameters_size, Pointer.getPeer(program));
	}
	@Name("clingo_control_add") 
	protected native boolean clingo_control_add(@Ptr long control, @Ptr long name, @Ptr long parameters, @Ptr long parameters_size, @Ptr long program);
	/**
	 * ! @see clingo_part<br>
	 * Original signature : <code>bool clingo_control_ground(clingo_control_t*, const clingo_part_t*, size_t, clingo_ground_callback_t, void*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:3052</i>
	 */
	@Name("clingo_control_ground") 
	public boolean clingo_control_ground(Pointer<ClingoLibrary.clingo_control > control, Pointer<clingo_part > parts, @Ptr long parts_size, Pointer<ClingoLibrary.clingo_ground_callback_t > ground_callback, Pointer<? > ground_callback_data) {
		return clingo_control_ground(Pointer.getPeer(control), Pointer.getPeer(parts), parts_size, Pointer.getPeer(ground_callback), Pointer.getPeer(ground_callback_data));
	}
	@Name("clingo_control_ground") 
	protected native boolean clingo_control_ground(@Ptr long control, @Ptr long parts, @Ptr long parts_size, @Ptr long ground_callback, @Ptr long ground_callback_data);
	/**
	 * ! - ::clingo_error_runtime if solving could not be started<br>
	 * Original signature : <code>bool clingo_control_solve(clingo_control_t*, clingo_solve_mode_bitset_t, const clingo_symbolic_literal_t*, size_t, clingo_solve_event_callback_t, void*, clingo_solve_handle_t**)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:3073</i>
	 */
	@Name("clingo_control_solve") 
	public boolean clingo_control_solve(Pointer<ClingoLibrary.clingo_control > control, int mode, Pointer<clingo_symbolic_literal > assumptions, @Ptr long assumptions_size, Pointer<ClingoLibrary.clingo_solve_event_callback_t > notify$, Pointer<? > data, Pointer<Pointer<ClingoLibrary.clingo_solve_handle > > handle) {
		return clingo_control_solve(Pointer.getPeer(control), mode, Pointer.getPeer(assumptions), assumptions_size, Pointer.getPeer(notify$), Pointer.getPeer(data), Pointer.getPeer(handle));
	}
	@Name("clingo_control_solve") 
	protected native boolean clingo_control_solve(@Ptr long control, int mode, @Ptr long assumptions, @Ptr long assumptions_size, @Ptr long notify$, @Ptr long data, @Ptr long handle);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_control_cleanup(clingo_control_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:3085</i>
	 */
	@Name("clingo_control_cleanup") 
	public boolean clingo_control_cleanup(Pointer<ClingoLibrary.clingo_control > control) {
		return clingo_control_cleanup(Pointer.getPeer(control));
	}
	@Name("clingo_control_cleanup") 
	protected native boolean clingo_control_cleanup(@Ptr long control);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_control_assign_external(clingo_control_t*, clingo_symbol_t, clingo_truth_value_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:3095</i>
	 */
	@Name("clingo_control_assign_external") 
	public boolean clingo_control_assign_external(Pointer<ClingoLibrary.clingo_control > control, long atom, int value) {
		return clingo_control_assign_external(Pointer.getPeer(control), atom, value);
	}
	@Name("clingo_control_assign_external") 
	protected native boolean clingo_control_assign_external(@Ptr long control, long atom, int value);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_control_release_external(clingo_control_t*, clingo_symbol_t)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:3106</i>
	 */
	@Name("clingo_control_release_external") 
	public boolean clingo_control_release_external(Pointer<ClingoLibrary.clingo_control > control, long atom) {
		return clingo_control_release_external(Pointer.getPeer(control), atom);
	}
	@Name("clingo_control_release_external") 
	protected native boolean clingo_control_release_external(@Ptr long control, long atom);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_control_register_propagator(clingo_control_t*, const clingo_propagator_t*, void*, bool)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:3120</i>
	 */
	@Name("clingo_control_register_propagator") 
	public boolean clingo_control_register_propagator(Pointer<ClingoLibrary.clingo_control > control, Pointer<clingo_propagator > propagator, Pointer<? > data, boolean sequential) {
		return clingo_control_register_propagator(Pointer.getPeer(control), Pointer.getPeer(propagator), Pointer.getPeer(data), sequential);
	}
	@Name("clingo_control_register_propagator") 
	protected native boolean clingo_control_register_propagator(@Ptr long control, @Ptr long propagator, @Ptr long data, boolean sequential);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_control_statistics(clingo_control_t*, clingo_statistics_t**)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:3138</i>
	 */
	@Name("clingo_control_statistics") 
	public boolean clingo_control_statistics(Pointer<ClingoLibrary.clingo_control > control, Pointer<Pointer<ClingoLibrary.clingo_statistic > > statistics) {
		return clingo_control_statistics(Pointer.getPeer(control), Pointer.getPeer(statistics));
	}
	@Name("clingo_control_statistics") 
	protected native boolean clingo_control_statistics(@Ptr long control, @Ptr long statistics);
	/**
	 * ! @param[in] control the target<br>
	 * Original signature : <code>void clingo_control_interrupt(clingo_control_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:3142</i>
	 */
	@Name("clingo_control_interrupt") 
	public void clingo_control_interrupt(Pointer<ClingoLibrary.clingo_control > control) {
		clingo_control_interrupt(Pointer.getPeer(control));
	}
	@Name("clingo_control_interrupt") 
	protected native void clingo_control_interrupt(@Ptr long control);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_control_clasp_facade(clingo_control_t*, void**)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:3154</i>
	 */
	@Name("clingo_control_clasp_facade") 
	public boolean clingo_control_clasp_facade(Pointer<ClingoLibrary.clingo_control > control, Pointer<Pointer<? > > clasp) {
		return clingo_control_clasp_facade(Pointer.getPeer(control), Pointer.getPeer(clasp));
	}
	@Name("clingo_control_clasp_facade") 
	protected native boolean clingo_control_clasp_facade(@Ptr long control, @Ptr long clasp);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_control_configuration(clingo_control_t*, clingo_configuration_t**)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:3168</i>
	 */
	@Name("clingo_control_configuration") 
	public boolean clingo_control_configuration(Pointer<ClingoLibrary.clingo_control > control, Pointer<Pointer<ClingoLibrary.clingo_configuration > > configuration) {
		return clingo_control_configuration(Pointer.getPeer(control), Pointer.getPeer(configuration));
	}
	@Name("clingo_control_configuration") 
	protected native boolean clingo_control_configuration(@Ptr long control, @Ptr long configuration);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_control_use_enumeration_assumption(clingo_control_t*, bool)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:3184</i>
	 */
	@Name("clingo_control_use_enumeration_assumption") 
	public boolean clingo_control_use_enumeration_assumption(Pointer<ClingoLibrary.clingo_control > control, boolean enable) {
		return clingo_control_use_enumeration_assumption(Pointer.getPeer(control), enable);
	}
	@Name("clingo_control_use_enumeration_assumption") 
	protected native boolean clingo_control_use_enumeration_assumption(@Ptr long control, boolean enable);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_control_get_const(clingo_control_t*, const char*, clingo_symbol_t*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:3196</i>
	 */
	@Name("clingo_control_get_const") 
	public boolean clingo_control_get_const(Pointer<ClingoLibrary.clingo_control > control, Pointer<Byte > name, Pointer<Long > symbol) {
		return clingo_control_get_const(Pointer.getPeer(control), Pointer.getPeer(name), Pointer.getPeer(symbol));
	}
	@Name("clingo_control_get_const") 
	protected native boolean clingo_control_get_const(@Ptr long control, @Ptr long name, @Ptr long symbol);
	/**
	 * ! @see clingo_control_get_const()<br>
	 * Original signature : <code>bool clingo_control_has_const(clingo_control_t*, const char*, bool*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:3206</i>
	 */
	@Name("clingo_control_has_const") 
	public boolean clingo_control_has_const(Pointer<ClingoLibrary.clingo_control > control, Pointer<Byte > name, Pointer<Boolean > exists) {
		return clingo_control_has_const(Pointer.getPeer(control), Pointer.getPeer(name), Pointer.getPeer(exists));
	}
	@Name("clingo_control_has_const") 
	protected native boolean clingo_control_has_const(@Ptr long control, @Ptr long name, @Ptr long exists);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_control_symbolic_atoms(clingo_control_t*, clingo_symbolic_atoms_t**)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:3215</i>
	 */
	@Name("clingo_control_symbolic_atoms") 
	public boolean clingo_control_symbolic_atoms(Pointer<ClingoLibrary.clingo_control > control, Pointer<Pointer<ClingoLibrary.clingo_symbolic_atoms > > atoms) {
		return clingo_control_symbolic_atoms(Pointer.getPeer(control), Pointer.getPeer(atoms));
	}
	@Name("clingo_control_symbolic_atoms") 
	protected native boolean clingo_control_symbolic_atoms(@Ptr long control, @Ptr long atoms);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_control_theory_atoms(clingo_control_t*, clingo_theory_atoms_t**)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:3223</i>
	 */
	@Name("clingo_control_theory_atoms") 
	public boolean clingo_control_theory_atoms(Pointer<ClingoLibrary.clingo_control > control, Pointer<Pointer<ClingoLibrary.clingo_theory_atoms > > atoms) {
		return clingo_control_theory_atoms(Pointer.getPeer(control), Pointer.getPeer(atoms));
	}
	@Name("clingo_control_theory_atoms") 
	protected native boolean clingo_control_theory_atoms(@Ptr long control, @Ptr long atoms);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_control_register_observer(clingo_control_t*, const clingo_ground_program_observer_t*, bool, void*)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:3231</i>
	 */
	@Name("clingo_control_register_observer") 
	public boolean clingo_control_register_observer(Pointer<ClingoLibrary.clingo_control > control, Pointer<clingo_ground_program_observer > observer, boolean replace, Pointer<? > data) {
		return clingo_control_register_observer(Pointer.getPeer(control), Pointer.getPeer(observer), replace, Pointer.getPeer(data));
	}
	@Name("clingo_control_register_observer") 
	protected native boolean clingo_control_register_observer(@Ptr long control, @Ptr long observer, boolean replace, @Ptr long data);
	/**
	 * ! - ::clingo_error_bad_alloc<br>
	 * Original signature : <code>bool clingo_control_backend(clingo_control_t*, clingo_backend_t**)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:3245</i>
	 */
	@Name("clingo_control_backend") 
	public boolean clingo_control_backend(Pointer<ClingoLibrary.clingo_control > control, Pointer<Pointer<ClingoLibrary.clingo_backend > > backend) {
		return clingo_control_backend(Pointer.getPeer(control), Pointer.getPeer(backend));
	}
	@Name("clingo_control_backend") 
	protected native boolean clingo_control_backend(@Ptr long control, @Ptr long backend);
	/**
	 * ! @return whether the call was successful<br>
	 * Original signature : <code>bool clingo_control_program_builder(clingo_control_t*, clingo_program_builder_t**)</code><br>
	 * <i>native declaration : src/main/clingo/lib/c/clingo.h:3253</i>
	 */
	@Name("clingo_control_program_builder") 
	public boolean clingo_control_program_builder(Pointer<ClingoLibrary.clingo_control > control, Pointer<Pointer<ClingoLibrary.clingo_program_builder > > builder) {
		return clingo_control_program_builder(Pointer.getPeer(control), Pointer.getPeer(builder));
	}
	@Name("clingo_control_program_builder") 
	protected native boolean clingo_control_program_builder(@Ptr long control, @Ptr long builder);
	/** Undefined type */
	public static interface clingo_backend {
		
	};
	/** Undefined type */
	public static interface clingo_program_builder {
		
	};
	/** Undefined type */
	public static interface clingo_propagate_init {
		
	};
	/** Undefined type */
	public static interface clingo_solve_handle {
		
	};
	/** Undefined type */
	public static interface clingo_model {
		
	};
	/** Undefined type */
	public static interface clingo_configuration {
		
	};
	/** Undefined type */
	public static interface clingo_statistic {
		
	};
	/** Undefined type */
	public static interface clingo_symbolic_atoms {
		
	};
	/** Undefined type */
	public static interface clingo_theory_atoms {
		
	};
	/** Undefined type */
	public static interface clingo_control {
		
	};
	/** Undefined type */
	public static interface clingo_assignment {
		
	};
	/** Undefined type */
	public static interface clingo_propagate_control {
		
	};
	/** Undefined type */
	public static interface clingo_solve_control {
		
	};
}
